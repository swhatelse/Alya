---
:header:
  :title: Experiment information
  :time: 2016-11-14 14:18:25.641474799 Z
  :machine: ! 'titan

'
:body:
  :environment:
    :hardware:
      :cpu: ! "processor\t: 0\nvendor_id\t: GenuineIntel\ncpu family\t: 6\nmodel\t\t:
        37\nmodel name\t: Intel(R) Core(TM) i5 CPU       M 520  @ 2.40GHz\nstepping\t:
        5\nmicrocode\t: 0x2\ncpu MHz\t\t: 2400.000\ncache size\t: 3072 KB\nphysical
        id\t: 0\nsiblings\t: 4\ncore id\t\t: 0\ncpu cores\t: 2\napicid\t\t: 0\ninitial
        apicid\t: 0\nfpu\t\t: yes\nfpu_exception\t: yes\ncpuid level\t: 11\nwp\t\t:
        yes\nflags\t\t: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov
        pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp
        lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc
        aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16
        xtpr pdcm pcid sse4_1 sse4_2 popcnt aes lahf_lm ida arat dtherm tpr_shadow
        vnmi flexpriority ept vpid\nbogomips\t: 4788.13\nclflush size\t: 64\ncache_alignment\t:
        64\naddress sizes\t: 36 bits physical, 48 bits virtual\npower management:\n\nprocessor\t:
        1\nvendor_id\t: GenuineIntel\ncpu family\t: 6\nmodel\t\t: 37\nmodel name\t:
        Intel(R) Core(TM) i5 CPU       M 520  @ 2.40GHz\nstepping\t: 5\nmicrocode\t:
        0x2\ncpu MHz\t\t: 2400.000\ncache size\t: 3072 KB\nphysical id\t: 0\nsiblings\t:
        4\ncore id\t\t: 0\ncpu cores\t: 2\napicid\t\t: 1\ninitial apicid\t: 1\nfpu\t\t:
        yes\nfpu_exception\t: yes\ncpuid level\t: 11\nwp\t\t: yes\nflags\t\t: fpu
        vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush
        dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp lm constant_tsc
        arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf pni pclmulqdq
        dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid sse4_1 sse4_2
        popcnt aes lahf_lm ida arat dtherm tpr_shadow vnmi flexpriority ept vpid\nbogomips\t:
        4788.13\nclflush size\t: 64\ncache_alignment\t: 64\naddress sizes\t: 36 bits
        physical, 48 bits virtual\npower management:\n\nprocessor\t: 2\nvendor_id\t:
        GenuineIntel\ncpu family\t: 6\nmodel\t\t: 37\nmodel name\t: Intel(R) Core(TM)
        i5 CPU       M 520  @ 2.40GHz\nstepping\t: 5\nmicrocode\t: 0x2\ncpu MHz\t\t:
        2400.000\ncache size\t: 3072 KB\nphysical id\t: 0\nsiblings\t: 4\ncore id\t\t:
        2\ncpu cores\t: 2\napicid\t\t: 4\ninitial apicid\t: 4\nfpu\t\t: yes\nfpu_exception\t:
        yes\ncpuid level\t: 11\nwp\t\t: yes\nflags\t\t: fpu vme de pse tsc msr pae
        mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse
        sse2 ss ht tm pbe syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts
        rep_good nopl xtopology nonstop_tsc aperfmperf pni pclmulqdq dtes64 monitor
        ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid sse4_1 sse4_2 popcnt aes
        lahf_lm ida arat dtherm tpr_shadow vnmi flexpriority ept vpid\nbogomips\t:
        4788.13\nclflush size\t: 64\ncache_alignment\t: 64\naddress sizes\t: 36 bits
        physical, 48 bits virtual\npower management:\n\nprocessor\t: 3\nvendor_id\t:
        GenuineIntel\ncpu family\t: 6\nmodel\t\t: 37\nmodel name\t: Intel(R) Core(TM)
        i5 CPU       M 520  @ 2.40GHz\nstepping\t: 5\nmicrocode\t: 0x2\ncpu MHz\t\t:
        2400.000\ncache size\t: 3072 KB\nphysical id\t: 0\nsiblings\t: 4\ncore id\t\t:
        2\ncpu cores\t: 2\napicid\t\t: 5\ninitial apicid\t: 5\nfpu\t\t: yes\nfpu_exception\t:
        yes\ncpuid level\t: 11\nwp\t\t: yes\nflags\t\t: fpu vme de pse tsc msr pae
        mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse
        sse2 ss ht tm pbe syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts
        rep_good nopl xtopology nonstop_tsc aperfmperf pni pclmulqdq dtes64 monitor
        ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid sse4_1 sse4_2 popcnt aes
        lahf_lm ida arat dtherm tpr_shadow vnmi flexpriority ept vpid\nbogomips\t:
        4788.13\nclflush size\t: 64\ncache_alignment\t: 64\naddress sizes\t: 36 bits
        physical, 48 bits virtual\npower management:\n\n"
      :cpu_frequency: '2400000

'
      :gpu: ! "  *-display\n       description: VGA compatible controller\n       produit:
        Core Processor Integrated Graphics Controller [8086:46]\n       fabriquant:
        Intel Corporation [8086]\n       identifiant matériel: 2\n       information
        bus: pci@0000:00:02.0\n       version: 02\n       bits: 64 bits\n       horloge:
        33MHz\n       fonctionnalités: vga_controller bus_master cap_list rom\n       configuration:
        driver=i915 latency=0\n       ressources: irq:42 mémoire:f2000000-f23fffff
        mémoire:d0000000-dfffffff portE/S:1800(taille=8)\n"
    :software:
      :linux: ! 'Linux version 3.13.0-37-generic (buildd@kapok) (gcc version 4.8.2
        (Ubuntu 4.8.2-19ubuntu1) ) #64-Ubuntu SMP Mon Sep 22 21:28:38 UTC 2014

'
      :environment_variables: ! 'XDG_VTNR=7

        LC_PAPER=fr_FR.UTF-8

        MANPATH=:/home/stemen/Programmes/lustre-v4-III-c-linux64/man:/home/stemen/Programmes/lustre-v4-III-c-linux64/esterelv5_21.linux/man

        XDG_SESSION_ID=c1

        SSH_AGENT_PID=2698

        LC_ADDRESS=fr_FR.UTF-8

        LC_MONETARY=fr_FR.UTF-8

        CUPS_USER=squinito

        GPG_AGENT_INFO=/run/user/1000/keyring-Fz3S1h/gpg:0:1

        VTE_VERSION=3409

        SHELL=/bin/bash

        TERM=xterm

        XDG_SESSION_COOKIE=45a9bb796cbd4fa9de8dbf4d5505312a-1479110828.59609-568633283

        GJS_DEBUG_OUTPUT=stderr

        ESTEREL=/home/stemen/Programmes/lustre-v4-III-c-linux64/esterelv5_21.linux

        WINDOWID=46140816

        LC_NUMERIC=fr_FR.UTF-8

        GNOME_KEYRING_CONTROL=/run/user/1000/keyring-Fz3S1h

        GJS_DEBUG_TOPICS=JS ERROR;JS LOG

        USER=stemen

        LC_TELEPHONE=fr_FR.UTF-8

        LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:

        LD_LIBRARY_PATH=:/home/stemen/Programmes/lustre-v4-III-c-linux64/esterelv5_21.linux/lib

        SSH_AUTH_SOCK=/run/user/1000/keyring-Fz3S1h/ssh

        DEFAULTS_PATH=/usr/share/gconf/default.default.path

        USERNAME=stemen

        SESSION_MANAGER=local/titan:@/tmp/.ICE-unix/2624,unix/titan:/tmp/.ICE-unix/2624

        XDG_CONFIG_DIRS=/etc/xdg/xdg-default:/etc/xdg

        DESKTOP_SESSION=default

        PATH=/home/stemen/Programmes/lustre-v4-III-c-linux64/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/home/stemen/Programmes/lustre-v4-III-c-linux64/esterelv5_21.linux/bin

        LUSTRE_INSTALL=/home/stemen/Programmes/lustre-v4-III-c-linux64

        GDM_XSERVER_LOCATION=local

        LC_IDENTIFICATION=fr_FR.UTF-8

        PWD=/home/stemen/Dev/LIG/Alya/src/scripts

        LANG=fr_FR.UTF-8

        GNOME_KEYRING_PID=2548

        MANDATORY_PATH=/usr/share/gconf/default.mandatory.path

        LC_MEASUREMENT=fr_FR.UTF-8

        GDMSESSION=default

        MDM_XSERVER_LOCATION=local

        CINNAMON_VERSION=2.4.8

        HOME=/home/stemen

        XDG_SEAT=seat0

        SHLVL=2

        GNOME_DESKTOP_SESSION_ID=this-is-deprecated

        LOGNAME=stemen

        XDG_SESSION_DESKTOP=default

        DBUS_SESSION_BUS_ADDRESS=unix:abstract=/tmp/dbus-H2CREcsBWu,guid=b022a276f49d16d7b29451ae582970ac

        XDG_DATA_DIRS=/usr/share/default:/usr/share/gnome:/usr/local/share/:/usr/share/:/usr/share/mdm/

        MDMSESSION=default

        WINDOWPATH=7

        TEXTDOMAIN=im-config

        DISPLAY=:0

        XDG_RUNTIME_DIR=/run/user/1000

        MDM_LANG=fr_FR.UTF-8

        XDG_CURRENT_DESKTOP=X-Cinnamon

        LC_TIME=fr_FR.UTF-8

        TEXTDOMAINDIR=/usr/share/locale/

        LC_NAME=fr_FR.UTF-8

        XAUTHORITY=/home/stemen/.Xauthority

        COLORTERM=gnome-terminal

        _=/usr/bin/ruby

'
      :cpu_governor: ! 'performance

'
      :running_softwares: ! 'F S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME
        CMD

        4 S     0     1     0  0  80   0 -  8472 poll_s ?        00:00:02 init

        1 S     0     2     0  0  80   0 -     0 kthrea ?        00:00:00 kthreadd

        1 S     0     3     2  0  80   0 -     0 smpboo ?        00:00:00 ksoftirqd/0

        1 S     0     5     2  0  60 -20 -     0 worker ?        00:00:00 kworker/0:0H

        1 S     0     7     2  0  80   0 -     0 rcu_gp ?        00:00:10 rcu_sched

        1 S     0     8     2  0  80   0 -     0 rcu_no ?        00:00:12 rcuos/0

        1 S     0     9     2  0  80   0 -     0 rcu_no ?        00:00:09 rcuos/1

        1 S     0    10     2  0  80   0 -     0 rcu_no ?        00:00:10 rcuos/2

        1 S     0    11     2  0  80   0 -     0 rcu_no ?        00:00:07 rcuos/3

        1 S     0    12     2  0  80   0 -     0 rcu_gp ?        00:00:00 rcu_bh

        1 S     0    13     2  0  80   0 -     0 rcu_no ?        00:00:00 rcuob/0

        1 S     0    14     2  0  80   0 -     0 rcu_no ?        00:00:00 rcuob/1

        1 S     0    15     2  0  80   0 -     0 rcu_no ?        00:00:00 rcuob/2

        1 S     0    16     2  0  80   0 -     0 rcu_no ?        00:00:00 rcuob/3

        1 S     0    17     2  0 -40   - -     0 smpboo ?        00:00:00 migration/0

        5 S     0    18     2  0 -40   - -     0 smpboo ?        00:00:00 watchdog/0

        5 S     0    19     2  0 -40   - -     0 smpboo ?        00:00:00 watchdog/1

        1 S     0    20     2  0 -40   - -     0 smpboo ?        00:00:00 migration/1

        1 S     0    21     2  0  80   0 -     0 smpboo ?        00:00:00 ksoftirqd/1

        1 S     0    23     2  0  60 -20 -     0 worker ?        00:00:00 kworker/1:0H

        5 S     0    24     2  0 -40   - -     0 smpboo ?        00:00:00 watchdog/2

        1 S     0    25     2  0 -40   - -     0 smpboo ?        00:00:00 migration/2

        1 S     0    26     2  0  80   0 -     0 smpboo ?        00:00:00 ksoftirqd/2

        1 S     0    28     2  0  60 -20 -     0 worker ?        00:00:00 kworker/2:0H

        5 S     0    29     2  0 -40   - -     0 smpboo ?        00:00:00 watchdog/3

        1 S     0    30     2  0 -40   - -     0 smpboo ?        00:00:00 migration/3

        1 S     0    31     2  0  80   0 -     0 smpboo ?        00:00:00 ksoftirqd/3

        1 S     0    33     2  0  60 -20 -     0 worker ?        00:00:00 kworker/3:0H

        1 S     0    34     2  0  60 -20 -     0 rescue ?        00:00:00 khelper

        5 S     0    35     2  0  80   0 -     0 devtmp ?        00:00:00 kdevtmpfs

        1 S     0    36     2  0  60 -20 -     0 rescue ?        00:00:00 netns

        1 S     0    37     2  0  60 -20 -     0 rescue ?        00:00:00 writeback

        1 S     0    38     2  0  60 -20 -     0 rescue ?        00:00:00 kintegrityd

        1 S     0    39     2  0  60 -20 -     0 rescue ?        00:00:00 bioset

        1 S     0    40     2  0  60 -20 -     0 worker ?        00:00:00 kworker/u9:0

        1 S     0    41     2  0  60 -20 -     0 rescue ?        00:00:00 kblockd

        1 S     0    42     2  0  60 -20 -     0 rescue ?        00:00:00 ata_sff

        1 S     0    43     2  0  80   0 -     0 hub_th ?        00:00:00 khubd

        1 S     0    44     2  0  60 -20 -     0 rescue ?        00:00:00 md

        1 S     0    45     2  0  60 -20 -     0 rescue ?        00:00:00 devfreq_wq

        1 S     0    48     2  0  80   0 -     0 watchd ?        00:00:00 khungtaskd

        1 S     0    49     2  0  80   0 -     0 kswapd ?        00:00:04 kswapd0

        1 S     0    50     2  0  85   5 -     0 ksm_sc ?        00:00:00 ksmd

        1 S     0    51     2  0  99  19 -     0 khugep ?        00:00:01 khugepaged

        1 S     0    52     2  0  80   0 -     0 fsnoti ?        00:00:00 fsnotify_mark

        1 S     0    53     2  0  80   0 -     0 ecrypt ?        00:00:00 ecryptfs-kthrea

        1 S     0    54     2  0  60 -20 -     0 rescue ?        00:00:00 crypto

        1 S     0    66     2  0  60 -20 -     0 rescue ?        00:00:00 kthrotld

        1 S     0    68     2  0  80   0 -     0 worker ?        00:00:01 kworker/3:1

        1 S     0    87     2  0  60 -20 -     0 rescue ?        00:00:00 deferwq

        1 S     0    88     2  0  60 -20 -     0 rescue ?        00:00:00 charger_manager

        1 S     0   137     2  0  60 -20 -     0 rescue ?        00:00:00 firewire

        1 S     0   138     2  0  60 -20 -     0 rescue ?        00:00:00 firewire_ohci

        1 S     0   139     2  0  60 -20 -     0 rescue ?        00:00:00 kpsmoused

        1 S     0   165     2  0  80   0 -     0 scsi_e ?        00:00:00 scsi_eh_0

        1 S     0   166     2  0  80   0 -     0 scsi_e ?        00:00:00 scsi_eh_1

        1 S     0   167     2  0  80   0 -     0 scsi_e ?        00:00:00 scsi_eh_2

        1 S     0   168     2  0  80   0 -     0 scsi_e ?        00:00:00 scsi_eh_3

        1 S     0   169     2  0  80   0 -     0 scsi_e ?        00:00:00 scsi_eh_4

        1 S     0   170     2  0  80   0 -     0 scsi_e ?        00:00:00 scsi_eh_5

        1 S     0   177     2  0  80   0 -     0 worker ?        00:00:04 kworker/0:1

        1 S     0   253     2  0  80   0 -     0 kjourn ?        00:00:00 jbd2/sda2-8

        1 S     0   254     2  0  60 -20 -     0 rescue ?        00:00:00 ext4-rsv-conver

        1 S     0   422     1  0  80   0 -  4868 poll_s ?        00:00:00 upstart-udev-br

        5 S     0   427     1  0  80   0 - 13040 ep_pol ?        00:00:00 systemd-udevd

        1 S     0   475     2  0   9   - -     0 irq_th ?        00:00:00 irq/43-mei_me

        1 S     0   495     2  0  60 -20 -     0 rescue ?        00:00:00 cfg80211

        1 S     0   501     2  0  60 -20 -     0 rescue ?        00:00:00 hd-audio0

        1 S     0   527     2  0   9   - -     0 irq_th ?        00:00:24 irq/45-iwlwifi

        1 S     0   548     2  0  60 -20 -     0 rescue ?        00:00:00 ktpacpid

        1 S     0   625     2  0  80   0 -     0 ips_ad ?        00:00:00 ips-adjust

        1 S     0   628     2  0  80   0 -     0 ips_mo ?        00:00:03 ips-monitor

        1 S     0   644     2  0  60 -20 -     0 rescue ?        00:00:00 kvm-irqfd-clean

        1 S     0   662     2  0  60 -20 -     0 rescue ?        00:00:00 kmpathd

        1 S     0   664     2  0  60 -20 -     0 rescue ?        00:00:00 kmpath_handlerd

        1 S     0   903     1  0  80   0 -  3846 poll_s ?        00:00:00 upstart-socket-

        1 S     0  1112     2  0  60 -20 -     0 rescue ?        00:00:00 iwlwifi

        5 S     0  1383     1  0  80   0 -  2924 fuse_d ?        00:00:01 mount.exfat

        1 S     0  1387     2  0  80   0 -     0 kjourn ?        00:00:00 jbd2/sda6-8

        1 S     0  1388     2  0  60 -20 -     0 rescue ?        00:00:00 ext4-rsv-conver

        4 S     0  1415     1  0  80   0 - 79176 poll_s ?        00:00:00 smbd

        5 S   102  1649     1  0  80   0 - 10028 ep_pol ?        00:00:04 dbus-daemon

        4 S     0  1698     1  0  80   0 - 83611 poll_s ?        00:00:00 ModemManager

        5 S   101  1703     1  0  80   0 - 63959 poll_s ?        00:00:00 rsyslogd

        5 S     0  1720     1  0  80   0 -  4823 poll_s ?        00:00:00 bluetoothd

        1 S     0  1726     1  0  80   0 -  3851 poll_s ?        00:00:00 upstart-file-br

        5 S     0  1729     2  0  70 -10 -     0 rfcomm ?        00:00:00 krfcommd

        4 S     0  1773     1  0  80   0 - 10861 ep_pol ?        00:00:00 systemd-logind

        5 S     0  1821     1  0  80   0 - 86675 poll_s ?        00:00:08 NetworkManager

        4 S     0  1827     1  0  80   0 - 70309 poll_s ?        00:00:00 polkitd

        5 S     0  1857     1  0  80   0 -  7688 poll_s ?        00:00:01 wpa_supplicant

        1 S     0  1860  1415  0  80   0 - 77188 poll_s ?        00:00:00 smbd

        5 S     0  1876  1415  0  80   0 - 79178 poll_s ?        00:00:00 smbd

        4 S     0  2048     1  0  80   0 -  3962 n_tty_ tty4     00:00:00 getty

        4 S     0  2050     1  0  80   0 -  3962 n_tty_ tty5     00:00:00 getty

        4 S     0  2056     1  0  80   0 -  3962 n_tty_ tty2     00:00:00 getty

        4 S     0  2057     1  0  80   0 -  3962 n_tty_ tty3     00:00:00 getty

        4 S     0  2060     1  0  80   0 -  3962 n_tty_ tty6     00:00:00 getty

        1 S     0  2104     1  0  80   0 -  5912 hrtime ?        00:00:00 cron

        5 S     0  2145     1  0  80   0 -  4797 hrtime ?        00:00:01 irqbalance

        4 S     0  2146     1  0  80   0 - 33314 poll_s ?        00:00:00 mdm

        4 S     0  2176     1  0  80   0 - 19371 poll_s ?        00:00:00 cups-browsed

        1 S     0  2256     1  0  80   0 -  1091 poll_s ?        00:00:04 acpid

        1 S     0  2312     1  0  80   0 - 10422 pause  ?        00:00:41 cpufreqd

        1 S   106  2330     1  0  80   0 -  9285 poll_s ?        00:00:00 kerneloops

        5 S   116  2341     1  0  80   0 -  7050 poll_s ?        00:00:00 dnsmasq

        4 S     0  2447     1  0  80   0 -  3962 n_tty_ tty1     00:00:00 getty

        5 S     0  2454  2146  0  80   0 - 66908 poll_s ?        00:00:00 mdm

        4 S     0  2461  2454  1  80   0 - 118085 poll_s tty7    00:05:13 Xorg

        1 S   111  2515     1  0  80   0 -  6108 poll_s ?        00:00:00 dbus-launch

        1 S   111  2517     1  0  80   0 -  9777 ep_pol ?        00:00:00 dbus-daemon

        1 S     0  2545     2  0  80   0 -     0 kaudit ?        00:00:00 kauditd

        5 S  1000  2548     1  0  80   0 - 73364 poll_s ?        00:00:00 gnome-keyring-d

        4 S     0  2553     1  0  80   0 - 525103 poll_s ?       00:00:00 console-kit-dae

        4 S  1000  2624  2454  0  80   0 - 99161 poll_s ?        00:00:00 cinnamon-sessio

        1 S  1000  2698  2624  0  80   0 -  2655 poll_s ?        00:00:00 ssh-agent

        1 S  1000  2701     1  0  80   0 -  6108 poll_s ?        00:00:00 dbus-launch

        1 S  1000  2702     1  0  80   0 -  9958 ep_pol ?        00:00:05 dbus-daemon

        0 S  1000  2709     1  0  80   0 - 84377 poll_s ?        00:00:00 at-spi-bus-laun

        0 S  1000  2713  2709  0  80   0 -  9810 ep_pol ?        00:00:00 dbus-daemon

        0 S  1000  2716     1  0  80   0 - 31227 poll_s ?        00:00:00 at-spi2-registr

        0 S  1000  2725  2624  0  80   0 - 257168 poll_s ?       00:00:11 cinnamon-settin

        1 S  1000  2738     1  0  69 -11 - 92523 poll_s ?        00:00:00 pulseaudio

        4 S   112  2743     1  0  81   1 - 42227 poll_s ?        00:00:00 rtkit-daemon

        4 S     0  2747     1  0  80   0 - 59869 poll_s ?        00:00:00 upowerd

        0 S  1000  2806     1  0  80   0 - 48167 poll_s ?        00:00:00 gvfsd

        0 S  1000  2810     1  0  80   0 - 86415 futex_ ?        00:00:00 gvfsd-fuse

        0 S  1000  2917     1  0  80   0 - 73765 poll_s ?        00:00:00 gvfs-udisks2-vo

        4 S     0  2920     1  0  80   0 - 92881 poll_s ?        00:00:02 udisksd

        0 S  1000  2929     1  0  80   0 - 49069 poll_s ?        00:00:00 gvfs-mtp-volume

        0 S  1000  2933     1  0  80   0 - 52110 poll_s ?        00:00:00 gvfs-gphoto2-vo

        0 S  1000  2937     1  0  80   0 - 70497 poll_s ?        00:00:00 gvfs-afc-volume

        0 S  1000  2941  2624  0  80   0 - 60106 wait   ?        00:00:00 cinnamon-launch

        4 S   109  2943     1  0  80   0 - 75432 poll_s ?        00:00:00 colord

        0 S  1000  2947  2725  0  80   0 -  5057 hrtime ?        00:00:11 syndaemon

        0 S  1000  2949     1  0  80   0 - 96809 poll_s ?        00:00:00 csd-printer

        0 S  1000  2954  2941  4  80   0 - 439693 poll_s ?       00:18:15 cinnamon

        0 S  1000  2963  2624  0  80   0 - 218946 poll_s ?       00:00:03 nemo

        0 S  1000  2964  2624  0  80   0 - 131805 poll_s ?       00:00:32 nm-applet

        0 S  1000  2967  2624  0  80   0 - 56731 poll_s ?        00:00:00 polkit-gnome-au

        0 S  1000  2975     1  0  80   0 - 44576 poll_s ?        00:00:00 dconf-service

        0 S  1000  2979     1  0  80   0 - 734472 poll_s ?       00:00:14 dropbox

        0 S  1000  2999     1  0  80   0 - 30390 poll_s ?        00:00:00 gvfsd-metadata

        0 S  1000  3004     1  0  80   0 - 13416 poll_s ?        00:00:00 gconfd-2

        0 S  1000  3006     1  0  80   0 - 88897 poll_s ?        00:00:00 gvfsd-trash

        4 S 65534  3018  1821  0  80   0 -  7779 poll_s ?        00:00:01 dnsmasq

        4 S     0  3160     1  0  80   0 - 60959 ep_pol ?        00:00:03 docker

        5 S     0  3261     1  0  80   0 - 57861 poll_s ?        00:00:00 nmbd

        0 S  1000  3271     1  0  80   0 - 64661 poll_s ?        00:00:00 cinnamon-slides

        4 S     0  3280     1  0  80   0 - 71868 poll_s ?        00:00:00 accounts-daemon

        4 S     0  3370     1  0  80   0 - 19194 ep_pol ?        00:00:00 cupsd

        0 S  1000  3385  2624  0  80   0 -  6067 wait   ?        00:00:00 mintupdate-laun

        0 S  1000  3386  2624  0  80   0 - 104615 poll_s ?       00:00:05 cinnamon-screen

        0 S  1000  3389  3385  0  80   0 -  1110 wait   ?        00:00:00 sh

        0 S  1000  3390  3389  0  80   0 - 127488 poll_s ?       00:00:12 mintUpdate

        0 S  1000  3524  2624  0  80   0 - 51629 poll_s ?        00:00:08 applet.py

        0 S  1000  3529     1  0  80   0 - 180585 poll_s ?       00:00:00 scp-dbus-servic

        4 S  1000  3735     1  1  80   0 - 792621 poll_s ?       00:05:22 chromium-browse

        0 S  1000  3760     1  0  80   0 - 248104 poll_s ?       00:00:52 thunderbird

        0 S  1000  3763     1  0  80   0 - 126024 poll_s ?       00:03:20 emacs

        0 S  1000  3786     1  0  80   0 - 136362 poll_s ?       00:00:22 gnome-terminal

        0 S  1000  3790  3786  0  80   0 -  3704 unix_s ?        00:00:00 gnome-pty-helpe

        0 S  1000  3855  3735  0  80   0 - 106992 wait  ?        00:00:00 chromium-browse

        5 S  1000  3863  3855  0  80   0 - 106992 poll_s ?       00:00:00 chromium-browse

        0 S  1000  3911  3735  0  80   0 - 533264 poll_s ?       00:03:32 chromium-browse

        1 S  1000  3934  3911  0  80   0 - 127877 skb_re ?       00:00:00 chromium-browse

        1 S  1000  4020  3863  0  80   0 - 367318 futex_ ?       00:00:20 chromium-browse

        1 S  1000  4023  3863  0  80   0 - 403653 futex_ ?       00:00:02 chromium-browse

        1 S  1000  4026  3863  0  80   0 - 310571 futex_ ?       00:00:00 chromium-browse

        1 S  1000  4028  3863  0  80   0 - 352100 futex_ ?       00:00:26 chromium-browse

        1 S  1000  4116  3863  0  80   0 - 365206 futex_ ?       00:00:23 chromium-browse

        1 S  1000  4192  3863  0  80   0 - 360518 futex_ ?       00:00:12 chromium-browse

        0 S  1000  5089  3786  0  80   0 -  6173 wait   pts/5    00:00:00 bash

        1 S  1000  5353  3863  0  80   0 - 366647 futex_ ?       00:00:28 chromium-browse

        1 S  1000  5467  3863  0  80   0 - 348610 futex_ ?       00:00:04 chromium-browse

        1 S  1000  5491  3863  0  80   0 - 345580 futex_ ?       00:00:14 chromium-browse

        1 S  1000  5503  3863  0  80   0 - 196226 futex_ ?       00:00:02 chromium-browse

        1 S     0  5712     2  0  80   0 -     0 worker ?        00:00:00 kworker/1:1

        1 S  1000  6092  3863  0  80   0 - 362920 futex_ ?       00:00:12 chromium-browse

        1 S  1000  7205  3863  0  80   0 - 357131 futex_ ?       00:00:10 chromium-browse

        1 S  1000  7318  3863  0  80   0 - 392875 futex_ ?       00:00:18 chromium-browse

        1 S  1000  7443  3863  0  80   0 - 360557 futex_ ?       00:00:14 chromium-browse

        1 S  1000  7463  3863  0  80   0 - 390201 futex_ ?       00:00:39 chromium-browse

        0 S  1000  9300  3786  0  80   0 -  5961 n_tty_ pts/7    00:00:00 bash

        1 S  1000  9347  3863  0  80   0 - 415457 futex_ ?       00:00:46 chromium-browse

        1 S     0  9965     2  0  80   0 -     0 worker ?        00:00:00 kworker/2:0

        1 S     0 14515     2  0  80   0 -     0 worker ?        00:00:00 kworker/1:2

        1 S     0 14522     2  0  80   0 -     0 worker ?        00:00:00 kworker/2:2

        1 S     0 14898     2  0  80   0 -     0 worker ?        00:00:00 kworker/3:3

        1 S     0 15066     2  0  80   0 -     0 worker ?        00:00:00 kworker/0:0

        1 S  1000 15120  3863  0  80   0 - 312896 futex_ ?       00:00:00 chromium-browse

        5 S   107 15218     1  0  80   0 -  8118 poll_s ?        00:00:02 avahi-daemon

        1 S   107 15219 15218  0  80   0 -  8054 unix_s ?        00:00:00 avahi-daemon

        1 S  1000 15248  3863  0  80   0 - 381980 futex_ ?       00:00:28 chromium-browse

        4 S     0 15262  1821  0  80   0 -  2556 poll_s ?        00:00:00 dhclient

        1 S  1000 15990  3863  0  80   0 - 382940 futex_ ?       00:00:09 chromium-browse

        1 S  1000 16069  3863  0  80   0 - 380282 futex_ ?       00:00:29 chromium-browse

        1 S  1000 16266  3863  0  80   0 - 356994 futex_ ?       00:00:08 chromium-browse

        1 S  1000 16313  3863  0  80   0 - 378743 futex_ ?       00:00:19 chromium-browse

        1 S  1000 16373  3863  0  80   0 - 365677 futex_ ?       00:00:09 chromium-browse

        1 S  1000 16920  3863  0  80   0 - 363497 futex_ ?       00:00:06 chromium-browse

        1 S  1000 17351  3863  0  80   0 - 366998 futex_ ?       00:00:06 chromium-browse

        1 S     0 20036     2  0  80   0 -     0 worker ?        00:00:00 kworker/u8:0

        1 S     0 20578     2  0  60 -20 -     0 worker ?        00:00:00 kworker/u9:1

        1 S     0 22269     2  0  80   0 -     0 worker ?        00:00:00 kworker/u8:1

        1 S     0 22536     2  0  80   0 -     0 worker ?        00:00:00 kworker/u8:2

        1 S     0 22609     2  0  80   0 -     0 worker ?        00:00:00 kworker/u8:3

        0 S  1000 22629  5089  0  80   0 -  3116 wait   pts/5    00:00:00 bash

        0 S  1000 22636 22629  4  80   0 - 22624 pipe_w pts/5    00:00:00 ruby

        4 R  1000 22660 22636  0  80   0 -  2529 -      pts/5    00:00:00 ps

'
      :users: ! 'stemen   tty7         2016-11-14 09:07 (:0)

        stemen   pts/5        2016-11-14 09:31 (:0)

        stemen   pts/7        2016-11-14 10:39 (:0)

'
  :kernel_info:
    ? :kernel: :ref
      :nest: 1
    : ! "function pabdf_nsi(x) result(y)\n  integer,intent(in) :: x \n  real :: y\n
      \ y = 1.0\nend function pabdf_nsi\n     subroutine nsi_element_assembly_split_oss(&\n
      \    pnode,pgaus,gpden,gpvis,gppor,gpsp1,gpsp2,gpvol,   &\n     gpsha,gpcar,gpadv,gpvep,gpgrp,gprhs,gprhc,gpvel,
      \  &\n     gpsgs,elvel,elpre,elbub,elauu,elaup,elapp,elapu,   &\n     elrbu,elrbp,dtinv_loc,dtsgs,pbubl,gpsha_bub,
      \      &\n     gpcar_bub,elauq,elapq,elaqu,elaqp,elaqq,elrbq,&\n     ! Original
      global variables\n     kfl_lumped,&\n     mnode,ntens,&\n     kfl_duatss,&\n
      \    fact_duatss,&\n     kfl_stabi_nsi,&\n     fvins_nsi,fcons_nsi,bemol_nsi,kfl_regim_nsi,&\n
      \    fvela_nsi,kfl_rmom2_nsi,kfl_press_nsi,&\n     kfl_p1ve2_nsi,kfl_linea_nsi,&\n
      \    kfl_confi_nsi,nbdfp_nsi,kfl_sgsti_nsi,&\n     kfl_nota1_nsi,kfl_limit_nsi,kfl_penal_nsi,&\n
      \    penal_nsi,&\n     kfl_bubbl_nsi,&\n     ndime,agrau,wgrgr)\n\n       integer,
      \    parameter  :: ip    = 4               ! 4-byte integer\n  integer,     parameter
      \ :: rp    = 8               ! Double precision \n\n  real(rp),    parameter
      \ :: zeror = epsilon(1.0_rp) ! Almost zero\n  integer(ip), parameter  :: TET04
      = 30              ! 3D \n  integer(ip), parameter  :: TET10 = 31              !
      3D \n  integer(ip), parameter  :: PYR05 = 32              ! 3D \n  integer(ip),
      parameter  :: PYR14 = 33              ! 3D \n  integer(ip), parameter  :: PEN06
      = 34              ! 3D  \n  integer(ip), parameter  :: PEN15 = 35              !
      3D \n  integer(ip), parameter  :: PEN18 = 36              ! 3D \n  integer(ip),
      parameter  :: HEX08 = 37              ! 3D \n  integer(ip), parameter  :: HEX20
      = 38              ! 3D \n  integer(ip), parameter  :: HEX27 = 39              !
      3D \n  integer(ip), parameter  :: HEX64 = 40              ! 3D \n  integer(ip),
      parameter  :: SHELL = 51              ! 3D shell element\n  integer(ip), parameter
      \ :: BAR3D = 52              ! 3D bar element\n\n\n     integer(ip), intent(in)
      \   :: ndime \n     integer(ip), intent(in)    :: kfl_lumped\n     integer(ip),
      intent(in)    :: mnode\n     integer(ip), intent(in)    :: ntens\n     integer(ip),
      intent(in)    :: kfl_duatss\n     integer(ip), intent(in)    :: fact_duatss\n
      \    integer(ip), intent(in)    :: kfl_stabi_nsi\n     real(rp),    intent(in)
      \   :: fvins_nsi\n     real(rp),    intent(in)    :: fcons_nsi\n     real(rp),
      \   intent(in)    :: bemol_nsi\n     integer(ip), intent(in)    :: kfl_regim_nsi\n
      \    real(rp),    intent(in)    :: fvela_nsi(3)\n     integer(ip), intent(in)
      \   :: kfl_rmom2_nsi\n     integer(ip), intent(in)    :: kfl_press_nsi\n     integer(ip),
      intent(in)    :: kfl_p1ve2_nsi\n     integer(ip), intent(in)    :: kfl_linea_nsi\n
      \    integer(ip), intent(in)    :: kfl_confi_nsi\n     integer(ip), intent(in)
      \   :: nbdfp_nsi\n     integer(ip), intent(in)    :: kfl_sgsti_nsi\n     integer(ip),
      intent(in)    :: kfl_nota1_nsi\n     integer(ip), intent(in)    :: kfl_limit_nsi\n
      \    integer(ip), intent(in)    :: kfl_penal_nsi\n     real(rp),    intent(in)
      \   :: penal_nsi\n     integer(ip), intent(in)    :: kfl_bubbl_nsi\n\n     integer(ip),
      intent(in)    :: pnode,pgaus\n     real(rp),    intent(in)    :: gpden(2,pgaus)\n
      \    real(rp),    intent(in)    :: gpvis(2,pgaus)\n     real(rp),    intent(in)
      \   :: gppor(2,pgaus)\n     real(rp),    intent(in)    :: gpsp1(2,pgaus)\n     real(rp),
      \   intent(in)    :: gpsp2(2,pgaus)\n     real(rp),    intent(in)    :: gpvol(2,pgaus)\n
      \    real(rp),    intent(in)    :: gpsha(2,pnode,pgaus)\n     real(rp),    intent(in)
      \   :: gpcar(2,ndime,mnode,pgaus)\n     real(rp),    intent(in)    :: gpadv(2,ndime,pgaus)\n
      \    real(rp),    intent(inout) :: gpvep(2,ndime,pgaus)\n     real(rp),    intent(inout)
      :: gpgrp(2,ndime,pgaus)\n     real(rp),    intent(inout) :: gprhs(2,ndime,pgaus)\n
      \    real(rp),    intent(inout) :: gprhc(2,pgaus)\n     real(rp),    intent(in)
      \   :: gpvel(2,ndime,pgaus,*)\n     real(rp),    intent(in)    :: gpsgs(2,ndime,pgaus,*)\n
      \    real(rp),    intent(in)    :: elvel(2,ndime,pnode,*)\n     real(rp),    intent(in)
      \   :: elpre(2,pnode,*)\n     real(rp),    intent(in)    :: elbub(2)\n\n     real(rp),
      \   intent(out)   :: wgrgr(2,pnode,pnode,pgaus)\n     real(rp),    intent(out)
      \  :: agrau(2,pnode,pgaus)\n\n     ! Matrices\n     real(rp),    intent(out)
      \  :: elauu(2,pnode*ndime,pnode*ndime)\n     real(rp),    intent(out)   :: elaup(2,pnode*ndime,pnode)\n
      \    real(rp),    intent(out)   :: elapp(2,pnode,pnode)\n     real(rp),    intent(out)
      \  :: elapu(2,pnode,pnode*ndime)\n     real(rp),    intent(out)   :: elrbu(2,ndime,pnode)\n
      \    real(rp),    intent(out)   :: elrbp(2,pnode)\n     ! Others\n     real(rp),
      \   intent(in)    :: dtinv_loc(2)\n     real(rp),    intent(in)    :: dtsgs(2)\n
      \    integer(ip), intent(in)    :: pbubl(2)\n     real(rp),    intent(in)    ::
      gpsha_bub(2,pgaus)\n     real(rp),    intent(in)    :: gpcar_bub(2,ndime,pgaus)\n
      \    ! Enrichement Element matrices\n     real(rp),    intent(out)   :: elauq(2,pnode*ndime,1)\n
      \    real(rp),    intent(out)   :: elapq(2,pnode,1)\n     real(rp),    intent(out)
      \  :: elaqu(2,1,pnode*ndime)\n     real(rp),    intent(out)   :: elaqp(2,1,pnode)\n
      \    real(rp),    intent(out)   :: elaqq(2,1,1)\n     real(rp),    intent(out)
      \  :: elrbq(2,1)\n     ! Local arrays\n     real(rp)                   :: gpsp1_p(2,pgaus)\n
      \    real(rp)                   :: gpsp1_v(2,pgaus)\n     real(rp)                   ::
      gpsp2_v(2,pgaus)\n     real(rp)                   :: c1(2)\n     real(rp)                   ::
      c2(2)\n     real(rp)                   :: c3(2)\n     real(rp)                   ::
      c4(2)\n     real(rp)                   :: alpha(2)\n     real(rp)                   ::
      beta(2)\n     real(rp)                   :: fact0(2)\n     real(rp)                   ::
      fact1(2)\n     real(rp)                   :: fact2(2)\n     real(rp)                   ::
      fact3(2)\n     real(rp)                   :: fact4(2)\n     real(rp)                   ::
      fact5(2)\n     real(rp)                   :: fact6(2)\n     real(rp)                   ::
      fact7(2)\n     real(rp)                   :: fact8(2)\n     real(rp)                   ::
      gpveo(2,3)\n     real(rp)                   :: fact1_p(2)\n     real(rp)                   ::
      dtinv_mod(2)\n     integer(ip)                :: inode,jnode,jdime\n     integer(ip)
      \               :: idofv,jdof2,jdof3,ivect\n     integer(ip)                ::
      idof1,idof3,idof2,igaus\n     integer(ip)                :: idime,jdof1,jdofv,itime\n
      \  dtinv_mod = dtinv_loc\n\n   gpsp1_p = gpsp1\n   gpsp1_v = gpsp1\n   gpsp2_v
      = gpsp2\n\n   if( kfl_nota1_nsi == 1 ) gpsp1_v = 0.0_rp \n\n   elrbp = 0.0_rp\n
      \  elrbu = 0.0_rp\n   elapp = 0.0_rp\n   elauu = 0.0_rp\n   elaup = 0.0_rp\n
      \  elapu = 0.0_rp\n   agrau(1:2,:,:)   = 0.0_rp\n       wgrgr(1:2,:,:,:) = 0.0_rp
      \n       do igaus = 1,pgaus\n          do inode = 1,pnode\n             do idime
      = 1,ndime\n                agrau(1:2,inode,igaus) =  agrau(1:2,inode,igaus)
      + &\n                                              gpadv(1:2,idime,igaus) *
      gpcar(1:2,idime,inode,igaus&\n&)\n             end do\n             agrau(1:2,inode,igaus)
      =  gpden(1:2,igaus) * agrau(1:2,inode,igaus) \n             do jnode = 1,pnode\n
      \               do idime = 1,ndime\n                   wgrgr(1:2,inode,jnode,igaus)
      = wgrgr(1:2,inode,jnode,igaus) + &\n                                                      gpcar(1:2,idime,inode,igaus)*gpcar(1:2,idime&\n&,jnode,igaus)\n
      \               end do\n             end do\n          end do\n       end do\nend
      subroutine nsi_element_assembly_split_oss\n"
    ? :kernel: :boast
      :nest: 1
    : ! "double pabdf_nsi(const int32_t x){\n  double y;\n  y = 1.0;\n  return y;\n}\nvoid
      nsi_element_assembly_split_oss(const int32_t pnode, const int32_t pgaus, const
      __m128d * gpden, const __m128d * gpvis, const __m128d * gppor, const __m128d
      * gpsp1, const __m128d * gpsp2, const __m128d * gpvol, const __m128d * gpsha,
      const __m128d * gpcar, const __m128d * gpadv, __m128d * gpvep, __m128d * gpgrp,
      __m128d * gprhs, __m128d * gprhc, const __m128d * gpvel, const __m128d * gpsgs,
      const __m128d * elvel, const __m128d * elpre, const __m128d * elbub, __m128d
      * elauu, __m128d * elaup, __m128d * elapp, __m128d * elapu, __m128d * elrbu,
      __m128d * elrbp, const __m128d * dtinv_loc, const __m128d * dtsgs, const __m64
      * pbubl, const __m128d * gpsha_bub, const __m128d * gpcar_bub, __m128d * elauq,
      __m128d * elapq, __m128d * elaqu, __m128d * elaqp, __m128d * elaqq, __m128d
      * elrbq, const int32_t kfl_lumped, const int32_t mnode, const int32_t ntens,
      const int32_t kfl_duatss, const int32_t fact_duatss, const int32_t kfl_stabi_nsi,
      const double fvins_nsi, const double fcons_nsi, const double bemol_nsi, const
      int32_t kfl_regim_nsi, const double * fvela_nsi, const int32_t kfl_rmom2_nsi,
      const int32_t kfl_press_nsi, const int32_t kfl_p1ve2_nsi, const int32_t kfl_linea_nsi,
      const int32_t kfl_confi_nsi, const int32_t nbdfp_nsi, const int32_t kfl_sgsti_nsi,
      const int32_t kfl_nota1_nsi, const int32_t kfl_limit_nsi, const int32_t kfl_penal_nsi,
      const double penal_nsi, const int32_t kfl_bubbl_nsi, const int32_t ndime, __m128d
      * agrau, __m128d * wgrgr){\n  __m128d gpsp1_p[(pgaus)];\n  __m128d gpsp1_v[(pgaus)];\n
      \ __m128d gpsp2_v[(pgaus)];\n  __m128d c1[(1)];\n  __m128d c2[(1)];\n  __m128d
      c3[(1)];\n  __m128d c4[(1)];\n  __m128d alpha[(1)];\n  __m128d beta[(1)];\n
      \ __m128d gpveo[(3)];\n  __m128d fact1_p[(1)];\n  __m128d dtinv_mod[(1)];\n
      \ int32_t inode;\n  int32_t jnode;\n  int32_t jdime;\n  int32_t idofv;\n  int32_t
      ivect;\n  int32_t igaus;\n  int32_t idime;\n  int32_t jdofv;\n  int32_t itime;\n
      \ __m128d fact[(8)];\n  int32_t idof[(3)];\n  int32_t jdof[(3)];\n  memcpy(dtinv_mod,
      dtinv_loc, sizeof(dtinv_mod));\n  memcpy(gpsp1_p, gpsp1, sizeof(gpsp1_p));\n
      \ memcpy(gpsp1_v, gpsp1, sizeof(gpsp1_v));\n  memcpy(gpsp2_v, gpsp2, sizeof(gpsp2_v));\n\n
      \ if (kfl_nota1_nsi == 1) memset(gpsp1_v, 0, sizeof(gpsp1_v));\n\n  memset(elrbp,
      0, sizeof(__m128d) * pnode);\n  memset(elrbu, 0, sizeof(__m128d) * ndime * pnode);\n
      \ memset(elapp, 0, sizeof(__m128d) * pnode * pnode);\n  memset(elauu, 0, sizeof(__m128d)
      * pnode * ndime * pnode * ndime);\n  memset(elaup, 0, sizeof(__m128d) * pnode
      * ndime * pnode);\n  memset(elapu, 0, sizeof(__m128d) * pnode * pnode * ndime);\n
      \ if (ndime == 2) {\n    for (igaus = 1; igaus <= pgaus; igaus += 1) {\n      for
      (inode = 1; inode <= pnode; inode += 1) {\n        agrau[inode - (1) + (pnode)
      * (igaus - (1))] = _mm_mul_pd( gpden[igaus - (1)], _mm_add_pd( _mm_mul_pd( gpadv[1
      - (1) + (ndime) * (igaus - (1))], gpcar[1 - (1) + (ndime) * (inode - (1) + (mnode)
      * (igaus - (1)))] ), _mm_mul_pd( gpadv[2 - (1) + (ndime) * (igaus - (1))], gpcar[2
      - (1) + (ndime) * (inode - (1) + (mnode) * (igaus - (1)))] ) ) );\n        for
      (jnode = 1; jnode <= pnode; jnode += 1) {\n          wgrgr[inode - (1) + (pnode)
      * (jnode - (1) + (pnode) * (igaus - (1)))] = _mm_add_pd( _mm_mul_pd( gpcar[1
      - (1) + (ndime) * (inode - (1) + (mnode) * (igaus - (1)))], gpcar[1 - (1) +
      (ndime) * (jnode - (1) + (mnode) * (igaus - (1)))] ), _mm_mul_pd( gpcar[2 -
      (1) + (ndime) * (inode - (1) + (mnode) * (igaus - (1)))], gpcar[2 - (1) + (ndime)
      * (jnode - (1) + (mnode) * (igaus - (1)))] ) );\n        }\n      }\n    }\n
      \ } else {\n    for (igaus = 1; igaus <= pgaus; igaus += 1) {\n      for (inode
      = 1; inode <= pnode; inode += 1) {\n        agrau[inode - (1) + (pnode) * (igaus
      - (1))] = _mm_mul_pd( gpden[igaus - (1)], _mm_add_pd( _mm_add_pd( _mm_mul_pd(
      gpadv[1 - (1) + (ndime) * (igaus - (1))], gpcar[1 - (1) + (ndime) * (inode -
      (1) + (mnode) * (igaus - (1)))] ), _mm_mul_pd( gpadv[2 - (1) + (ndime) * (igaus
      - (1))], gpcar[2 - (1) + (ndime) * (inode - (1) + (mnode) * (igaus - (1)))]
      ) ), _mm_mul_pd( gpadv[3 - (1) + (ndime) * (igaus - (1))], gpcar[3 - (1) + (ndime)
      * (inode - (1) + (mnode) * (igaus - (1)))] ) ) );\n        for (jnode = 1; jnode
      <= pnode; jnode += 1) {\n          wgrgr[inode - (1) + (pnode) * (jnode - (1)
      + (pnode) * (igaus - (1)))] = _mm_add_pd( _mm_add_pd( _mm_mul_pd( gpcar[1 -
      (1) + (ndime) * (inode - (1) + (mnode) * (igaus - (1)))], gpcar[1 - (1) + (ndime)
      * (jnode - (1) + (mnode) * (igaus - (1)))] ), _mm_mul_pd( gpcar[2 - (1) + (ndime)
      * (inode - (1) + (mnode) * (igaus - (1)))], gpcar[2 - (1) + (ndime) * (jnode
      - (1) + (mnode) * (igaus - (1)))] ) ), _mm_mul_pd( gpcar[3 - (1) + (ndime) *
      (inode - (1) + (mnode) * (igaus - (1)))], gpcar[3 - (1) + (ndime) * (jnode -
      (1) + (mnode) * (igaus - (1)))] ) );\n        }\n      }\n    }\n  }\n}\n"
    ? :kernel: :ref
      :nest: 2
    : ! "function pabdf_nsi(x) result(y)\n  integer,intent(in) :: x \n  real :: y\n
      \ y = 1.0\nend function pabdf_nsi\n     subroutine nsi_element_assembly_split_oss(&\n
      \    pnode,pgaus,gpden,gpvis,gppor,gpsp1,gpsp2,gpvol,   &\n     gpsha,gpcar,gpadv,gpvep,gpgrp,gprhs,gprhc,gpvel,
      \  &\n     gpsgs,elvel,elpre,elbub,elauu,elaup,elapp,elapu,   &\n     elrbu,elrbp,dtinv_loc,dtsgs,pbubl,gpsha_bub,
      \      &\n     gpcar_bub,elauq,elapq,elaqu,elaqp,elaqq,elrbq,&\n     ! Original
      global variables\n     kfl_lumped,&\n     mnode,ntens,&\n     kfl_duatss,&\n
      \    fact_duatss,&\n     kfl_stabi_nsi,&\n     fvins_nsi,fcons_nsi,bemol_nsi,kfl_regim_nsi,&\n
      \    fvela_nsi,kfl_rmom2_nsi,kfl_press_nsi,&\n     kfl_p1ve2_nsi,kfl_linea_nsi,&\n
      \    kfl_confi_nsi,nbdfp_nsi,kfl_sgsti_nsi,&\n     kfl_nota1_nsi,kfl_limit_nsi,kfl_penal_nsi,&\n
      \    penal_nsi,&\n     kfl_bubbl_nsi,&\n     ndime,agrau,wgrgr)\n\n       integer,
      \    parameter  :: ip    = 4               ! 4-byte integer\n  integer,     parameter
      \ :: rp    = 8               ! Double precision \n\n  real(rp),    parameter
      \ :: zeror = epsilon(1.0_rp) ! Almost zero\n  integer(ip), parameter  :: TET04
      = 30              ! 3D \n  integer(ip), parameter  :: TET10 = 31              !
      3D \n  integer(ip), parameter  :: PYR05 = 32              ! 3D \n  integer(ip),
      parameter  :: PYR14 = 33              ! 3D \n  integer(ip), parameter  :: PEN06
      = 34              ! 3D  \n  integer(ip), parameter  :: PEN15 = 35              !
      3D \n  integer(ip), parameter  :: PEN18 = 36              ! 3D \n  integer(ip),
      parameter  :: HEX08 = 37              ! 3D \n  integer(ip), parameter  :: HEX20
      = 38              ! 3D \n  integer(ip), parameter  :: HEX27 = 39              !
      3D \n  integer(ip), parameter  :: HEX64 = 40              ! 3D \n  integer(ip),
      parameter  :: SHELL = 51              ! 3D shell element\n  integer(ip), parameter
      \ :: BAR3D = 52              ! 3D bar element\n\n\n     integer(ip), intent(in)
      \   :: ndime \n     integer(ip), intent(in)    :: kfl_lumped\n     integer(ip),
      intent(in)    :: mnode\n     integer(ip), intent(in)    :: ntens\n     integer(ip),
      intent(in)    :: kfl_duatss\n     integer(ip), intent(in)    :: fact_duatss\n
      \    integer(ip), intent(in)    :: kfl_stabi_nsi\n     real(rp),    intent(in)
      \   :: fvins_nsi\n     real(rp),    intent(in)    :: fcons_nsi\n     real(rp),
      \   intent(in)    :: bemol_nsi\n     integer(ip), intent(in)    :: kfl_regim_nsi\n
      \    real(rp),    intent(in)    :: fvela_nsi(3)\n     integer(ip), intent(in)
      \   :: kfl_rmom2_nsi\n     integer(ip), intent(in)    :: kfl_press_nsi\n     integer(ip),
      intent(in)    :: kfl_p1ve2_nsi\n     integer(ip), intent(in)    :: kfl_linea_nsi\n
      \    integer(ip), intent(in)    :: kfl_confi_nsi\n     integer(ip), intent(in)
      \   :: nbdfp_nsi\n     integer(ip), intent(in)    :: kfl_sgsti_nsi\n     integer(ip),
      intent(in)    :: kfl_nota1_nsi\n     integer(ip), intent(in)    :: kfl_limit_nsi\n
      \    integer(ip), intent(in)    :: kfl_penal_nsi\n     real(rp),    intent(in)
      \   :: penal_nsi\n     integer(ip), intent(in)    :: kfl_bubbl_nsi\n\n     integer(ip),
      intent(in)    :: pnode,pgaus\n     real(rp),    intent(in)    :: gpden(2,pgaus)\n
      \    real(rp),    intent(in)    :: gpvis(2,pgaus)\n     real(rp),    intent(in)
      \   :: gppor(2,pgaus)\n     real(rp),    intent(in)    :: gpsp1(2,pgaus)\n     real(rp),
      \   intent(in)    :: gpsp2(2,pgaus)\n     real(rp),    intent(in)    :: gpvol(2,pgaus)\n
      \    real(rp),    intent(in)    :: gpsha(2,pnode,pgaus)\n     real(rp),    intent(in)
      \   :: gpcar(2,ndime,mnode,pgaus)\n     real(rp),    intent(in)    :: gpadv(2,ndime,pgaus)\n
      \    real(rp),    intent(inout) :: gpvep(2,ndime,pgaus)\n     real(rp),    intent(inout)
      :: gpgrp(2,ndime,pgaus)\n     real(rp),    intent(inout) :: gprhs(2,ndime,pgaus)\n
      \    real(rp),    intent(inout) :: gprhc(2,pgaus)\n     real(rp),    intent(in)
      \   :: gpvel(2,ndime,pgaus,*)\n     real(rp),    intent(in)    :: gpsgs(2,ndime,pgaus,*)\n
      \    real(rp),    intent(in)    :: elvel(2,ndime,pnode,*)\n     real(rp),    intent(in)
      \   :: elpre(2,pnode,*)\n     real(rp),    intent(in)    :: elbub(2)\n\n     real(rp),
      \   intent(out)   :: wgrgr(2,pnode,pnode,pgaus)\n     real(rp),    intent(out)
      \  :: agrau(2,pnode,pgaus)\n\n     ! Matrices\n     real(rp),    intent(out)
      \  :: elauu(2,pnode*ndime,pnode*ndime)\n     real(rp),    intent(out)   :: elaup(2,pnode*ndime,pnode)\n
      \    real(rp),    intent(out)   :: elapp(2,pnode,pnode)\n     real(rp),    intent(out)
      \  :: elapu(2,pnode,pnode*ndime)\n     real(rp),    intent(out)   :: elrbu(2,ndime,pnode)\n
      \    real(rp),    intent(out)   :: elrbp(2,pnode)\n     ! Others\n     real(rp),
      \   intent(in)    :: dtinv_loc(2)\n     real(rp),    intent(in)    :: dtsgs(2)\n
      \    integer(ip), intent(in)    :: pbubl(2)\n     real(rp),    intent(in)    ::
      gpsha_bub(2,pgaus)\n     real(rp),    intent(in)    :: gpcar_bub(2,ndime,pgaus)\n
      \    ! Enrichement Element matrices\n     real(rp),    intent(out)   :: elauq(2,pnode*ndime,1)\n
      \    real(rp),    intent(out)   :: elapq(2,pnode,1)\n     real(rp),    intent(out)
      \  :: elaqu(2,1,pnode*ndime)\n     real(rp),    intent(out)   :: elaqp(2,1,pnode)\n
      \    real(rp),    intent(out)   :: elaqq(2,1,1)\n     real(rp),    intent(out)
      \  :: elrbq(2,1)\n     ! Local arrays\n     real(rp)                   :: gpsp1_p(2,pgaus)\n
      \    real(rp)                   :: gpsp1_v(2,pgaus)\n     real(rp)                   ::
      gpsp2_v(2,pgaus)\n     real(rp)                   :: c1(2)\n     real(rp)                   ::
      c2(2)\n     real(rp)                   :: c3(2)\n     real(rp)                   ::
      c4(2)\n     real(rp)                   :: alpha(2)\n     real(rp)                   ::
      beta(2)\n     real(rp)                   :: fact0(2)\n     real(rp)                   ::
      fact1(2)\n     real(rp)                   :: fact2(2)\n     real(rp)                   ::
      fact3(2)\n     real(rp)                   :: fact4(2)\n     real(rp)                   ::
      fact5(2)\n     real(rp)                   :: fact6(2)\n     real(rp)                   ::
      fact7(2)\n     real(rp)                   :: fact8(2)\n     real(rp)                   ::
      gpveo(2,3)\n     real(rp)                   :: fact1_p(2)\n     real(rp)                   ::
      dtinv_mod(2)\n     integer(ip)                :: inode,jnode,jdime\n     integer(ip)
      \               :: idofv,jdof2,jdof3,ivect\n     integer(ip)                ::
      idof1,idof3,idof2,igaus\n     integer(ip)                :: idime,jdof1,jdofv,itime\n
      \  dtinv_mod = dtinv_loc\n\n   gpsp1_p = gpsp1\n   gpsp1_v = gpsp1\n   gpsp2_v
      = gpsp2\n\n   if( kfl_nota1_nsi == 1 ) gpsp1_v = 0.0_rp \n\n   elrbp = 0.0_rp\n
      \  elrbu = 0.0_rp\n   elapp = 0.0_rp\n   elauu = 0.0_rp\n   elaup = 0.0_rp\n
      \  elapu = 0.0_rp\n   do igaus = 1,pgaus\n\n      fact0(1:2) = gpsp2_v(1:2,igaus)
      * gpvol(1:2,igaus)\n      fact6(1:2) = gpvis(1:2,igaus)   * gpvol(1:2,igaus)\n
      \     fact7(1:2) = gpsp1_v(1:2,igaus) * gpvol(1:2,igaus)\n      fact8(1:2) =
      pabdf_nsi(1) * gpden(1:2,igaus) * dtinv_mod(1:2) + gppor(1:2,igaus)\n\n      do
      inode = 1,pnode\n         do idime = 1,ndime\n\n            idofv           =
      (inode-1)*ndime+idime\n            fact1(1:2) = fact0(1:2) * gpcar(1:2,idime,inode,igaus)
      \     \n\n            do jnode = 1,pnode    \n               do jdime = 1,ndime
      \                  \n                  jdofv                       = (jnode-1)*ndime+jdime\n
      \                 elauu(1:2,idofv,jdofv) = elauu(1:2,idofv,jdofv) + fact1(1:2)
      * gpcar(1:2,jdime,j&\n&node,igaus)                   \n               end do\n\n
      \              jdofv           = (jnode-1)*ndime+idime\n               fact4(1:2)
      = gpsha(1:2,inode,igaus) * gpvol(1:2,igaus)\n               fact5(1:2) = fact4(1:2)
      * ( agrau(1:2,jnode,igaus) + fact8(1:2) * gpsha(1:2,jnode,i&\n&gaus) ) + fact6(1:2)
      *   wgrgr(1:2,inode,jnode,igaus) + fact7(1:2) *   agrau(1:2,jnode,igaus) * ag&\n&rau(1:2,inode,igaus)
      \  \n               elauu(1:2,idofv,jdofv) = elauu(1:2,idofv,jdofv) + fact5(1:2)\n\n
      \           end do\n         end do\n      end do\n   end do\nend subroutine
      nsi_element_assembly_split_oss\n"
    ? :kernel: :boast
      :nest: 2
    : ! "double pabdf_nsi(const int32_t x){\n  double y;\n  y = 1.0;\n  return y;\n}\nvoid
      nsi_element_assembly_split_oss(const int32_t pnode, const int32_t pgaus, const
      __m128d * gpden, const __m128d * gpvis, const __m128d * gppor, const __m128d
      * gpsp1, const __m128d * gpsp2, const __m128d * gpvol, const __m128d * gpsha,
      const __m128d * gpcar, const __m128d * gpadv, __m128d * gpvep, __m128d * gpgrp,
      __m128d * gprhs, __m128d * gprhc, const __m128d * gpvel, const __m128d * gpsgs,
      const __m128d * elvel, const __m128d * elpre, const __m128d * elbub, __m128d
      * elauu, __m128d * elaup, __m128d * elapp, __m128d * elapu, __m128d * elrbu,
      __m128d * elrbp, const __m128d * dtinv_loc, const __m128d * dtsgs, const __m64
      * pbubl, const __m128d * gpsha_bub, const __m128d * gpcar_bub, __m128d * elauq,
      __m128d * elapq, __m128d * elaqu, __m128d * elaqp, __m128d * elaqq, __m128d
      * elrbq, const int32_t kfl_lumped, const int32_t mnode, const int32_t ntens,
      const int32_t kfl_duatss, const int32_t fact_duatss, const int32_t kfl_stabi_nsi,
      const double fvins_nsi, const double fcons_nsi, const double bemol_nsi, const
      int32_t kfl_regim_nsi, const double * fvela_nsi, const int32_t kfl_rmom2_nsi,
      const int32_t kfl_press_nsi, const int32_t kfl_p1ve2_nsi, const int32_t kfl_linea_nsi,
      const int32_t kfl_confi_nsi, const int32_t nbdfp_nsi, const int32_t kfl_sgsti_nsi,
      const int32_t kfl_nota1_nsi, const int32_t kfl_limit_nsi, const int32_t kfl_penal_nsi,
      const double penal_nsi, const int32_t kfl_bubbl_nsi, const int32_t ndime, __m128d
      * agrau, __m128d * wgrgr){\n  __m128d gpsp1_p[(pgaus)];\n  __m128d gpsp1_v[(pgaus)];\n
      \ __m128d gpsp2_v[(pgaus)];\n  __m128d c1[(1)];\n  __m128d c2[(1)];\n  __m128d
      c3[(1)];\n  __m128d c4[(1)];\n  __m128d alpha[(1)];\n  __m128d beta[(1)];\n
      \ __m128d gpveo[(3)];\n  __m128d fact1_p[(1)];\n  __m128d dtinv_mod[(1)];\n
      \ int32_t inode;\n  int32_t jnode;\n  int32_t jdime;\n  int32_t idofv;\n  int32_t
      ivect;\n  int32_t igaus;\n  int32_t idime;\n  int32_t jdofv;\n  int32_t itime;\n
      \ __m128d fact[(8)];\n  int32_t idof[(3)];\n  int32_t jdof[(3)];\n  memcpy(dtinv_mod,
      dtinv_loc, sizeof(dtinv_mod));\n  memcpy(gpsp1_p, gpsp1, sizeof(gpsp1_p));\n
      \ memcpy(gpsp1_v, gpsp1, sizeof(gpsp1_v));\n  memcpy(gpsp2_v, gpsp2, sizeof(gpsp2_v));\n\n
      \ if (kfl_nota1_nsi == 1) memset(gpsp1_v, 0, sizeof(gpsp1_v));\n\n  memset(elrbp,
      0, sizeof(__m128d) * pnode);\n  memset(elrbu, 0, sizeof(__m128d) * ndime * pnode);\n
      \ memset(elapp, 0, sizeof(__m128d) * pnode * pnode);\n  memset(elauu, 0, sizeof(__m128d)
      * pnode * ndime * pnode * ndime);\n  memset(elaup, 0, sizeof(__m128d) * pnode
      * ndime * pnode);\n  memset(elapu, 0, sizeof(__m128d) * pnode * pnode * ndime);\n
      \ if (ndime == 2) {\n    for (igaus = 1; igaus <= pgaus; igaus += 1) {\n      fact[0
      - (1)] = _mm_mul_pd( gpsp2[igaus - (1)], gpvol[igaus - (1)] );\n      fact[6
      - (1)] = _mm_mul_pd( gpvis[igaus - (1)], gpvol[igaus - (1)] );\n      fact[7
      - (1)] = _mm_mul_pd( gpsp1_v[igaus - (1)], gpvol[igaus - (1)] );\n      fact[8
      - (1)] = _mm_add_pd( _mm_mul_pd( gpden[igaus - (1)], dtinv_loc[1 - (1)] ), gppor[igaus
      - (1)] );\n      for (inode = 1; inode <= pnode; inode += 1) {\n        idof[0
      - (1)] = (inode) * (2) - (2) + 0 + 1;\n        idof[1 - (1)] = (inode) * (2)
      - (2) + 1 + 1;\n        fact[1 - (1)] = _mm_mul_pd( fact[0 - (1)], gpcar[1 -
      (1) + (ndime) * (inode - (1) + (mnode) * (igaus - (1)))] );\n        fact[2
      - (1)] = _mm_mul_pd( fact[0 - (1)], gpcar[2 - (1) + (ndime) * (inode - (1) +
      (mnode) * (igaus - (1)))] );\n        fact[4 - (1)] = _mm_mul_pd( gpsha[inode
      - (1) + (pnode) * (igaus - (1))], gpvol[igaus - (1)] );\n        for (jnode
      = 1; jnode <= pnode; jnode += 1) {\n          jdof[0 - (1)] = (jnode) * (2)
      - (2) + 0 + 1;\n          jdof[1 - (1)] = (jnode) * (2) - (2) + 1 + 1;\n          fact[5
      - (1)] = _mm_add_pd( _mm_add_pd( _mm_mul_pd( fact[4 - (1)], _mm_add_pd( agrau[jnode
      - (1) + (pnode) * (igaus - (1))], _mm_mul_pd( fact[8 - (1)], gpsha[jnode - (1)
      + (pnode) * (igaus - (1))] ) ) ), _mm_mul_pd( fact[6 - (1)], wgrgr[inode - (1)
      + (pnode) * (jnode - (1) + (pnode) * (igaus - (1)))] ) ), _mm_mul_pd( _mm_mul_pd(
      fact[7 - (1)], agrau[jnode - (1) + (pnode) * (igaus - (1))] ), agrau[inode -
      (1) + (pnode) * (igaus - (1))] ) );\n          elauu[idof[0 - (1)] - (1) + ((pnode)
      * (ndime)) * (jdof[0 - (1)] - (1))] = _mm_add_pd( _mm_add_pd( elauu[idof[0 -
      (1)] - (1) + ((pnode) * (ndime)) * (jdof[0 - (1)] - (1))], _mm_mul_pd( fact[1
      - (1)], gpcar[1 - (1) + (ndime) * (jnode - (1) + (mnode) * (igaus - (1)))] )
      ), fact[5 - (1)] );\n          elauu[idof[1 - (1)] - (1) + ((pnode) * (ndime))
      * (jdof[0 - (1)] - (1))] = _mm_add_pd( elauu[idof[1 - (1)] - (1) + ((pnode)
      * (ndime)) * (jdof[0 - (1)] - (1))], _mm_mul_pd( fact[2 - (1)], gpcar[1 - (1)
      + (ndime) * (jnode - (1) + (mnode) * (igaus - (1)))] ) );\n          elauu[idof[0
      - (1)] - (1) + ((pnode) * (ndime)) * (jdof[1 - (1)] - (1))] = _mm_add_pd( elauu[idof[0
      - (1)] - (1) + ((pnode) * (ndime)) * (jdof[1 - (1)] - (1))], _mm_mul_pd( fact[1
      - (1)], gpcar[2 - (1) + (ndime) * (jnode - (1) + (mnode) * (igaus - (1)))] )
      );\n          elauu[idof[1 - (1)] - (1) + ((pnode) * (ndime)) * (jdof[1 - (1)]
      - (1))] = _mm_add_pd( _mm_add_pd( elauu[idof[1 - (1)] - (1) + ((pnode) * (ndime))
      * (jdof[1 - (1)] - (1))], _mm_mul_pd( fact[2 - (1)], gpcar[2 - (1) + (ndime)
      * (jnode - (1) + (mnode) * (igaus - (1)))] ) ), fact[5 - (1)] );\n        }\n
      \     }\n    }\n  } else {\n    for (igaus = 1; igaus <= pgaus; igaus += 1)
      {\n      fact[0 - (1)] = _mm_mul_pd( gpsp2[igaus - (1)], gpvol[igaus - (1)]
      );\n      fact[6 - (1)] = _mm_mul_pd( gpvis[igaus - (1)], gpvol[igaus - (1)]
      );\n      fact[7 - (1)] = _mm_mul_pd( gpsp1_v[igaus - (1)], gpvol[igaus - (1)]
      );\n      fact[8 - (1)] = _mm_add_pd( _mm_mul_pd( gpden[igaus - (1)], dtinv_loc[1
      - (1)] ), gppor[igaus - (1)] );\n      for (inode = 1; inode <= pnode; inode
      += 1) {\n        idof[0 - (1)] = (inode) * (3) - (3) + 0 + 1;\n        idof[1
      - (1)] = (inode) * (3) - (3) + 1 + 1;\n        idof[2 - (1)] = (inode) * (3)
      - (3) + 2 + 1;\n        fact[1 - (1)] = _mm_mul_pd( fact[0 - (1)], gpcar[1 -
      (1) + (ndime) * (inode - (1) + (mnode) * (igaus - (1)))] );\n        fact[2
      - (1)] = _mm_mul_pd( fact[0 - (1)], gpcar[2 - (1) + (ndime) * (inode - (1) +
      (mnode) * (igaus - (1)))] );\n        fact[3 - (1)] = _mm_mul_pd( fact[0 - (1)],
      gpcar[3 - (1) + (ndime) * (inode - (1) + (mnode) * (igaus - (1)))] );\n        fact[4
      - (1)] = _mm_mul_pd( gpsha[inode - (1) + (pnode) * (igaus - (1))], gpvol[igaus
      - (1)] );\n        for (jnode = 1; jnode <= pnode; jnode += 1) {\n          jdof[0
      - (1)] = (jnode) * (3) - (3) + 0 + 1;\n          jdof[1 - (1)] = (jnode) * (3)
      - (3) + 1 + 1;\n          jdof[2 - (1)] = (jnode) * (3) - (3) + 2 + 1;\n          fact[5
      - (1)] = _mm_add_pd( _mm_add_pd( _mm_mul_pd( fact[4 - (1)], _mm_add_pd( agrau[jnode
      - (1) + (pnode) * (igaus - (1))], _mm_mul_pd( fact[8 - (1)], gpsha[jnode - (1)
      + (pnode) * (igaus - (1))] ) ) ), _mm_mul_pd( fact[6 - (1)], wgrgr[inode - (1)
      + (pnode) * (jnode - (1) + (pnode) * (igaus - (1)))] ) ), _mm_mul_pd( _mm_mul_pd(
      fact[7 - (1)], agrau[jnode - (1) + (pnode) * (igaus - (1))] ), agrau[inode -
      (1) + (pnode) * (igaus - (1))] ) );\n          elauu[idof[0 - (1)] - (1) + ((pnode)
      * (ndime)) * (jdof[0 - (1)] - (1))] = _mm_add_pd( _mm_add_pd( elauu[idof[0 -
      (1)] - (1) + ((pnode) * (ndime)) * (jdof[0 - (1)] - (1))], _mm_mul_pd( fact[1
      - (1)], gpcar[1 - (1) + (ndime) * (jnode - (1) + (mnode) * (igaus - (1)))] )
      ), fact[5 - (1)] );\n          elauu[idof[1 - (1)] - (1) + ((pnode) * (ndime))
      * (jdof[0 - (1)] - (1))] = _mm_add_pd( elauu[idof[1 - (1)] - (1) + ((pnode)
      * (ndime)) * (jdof[0 - (1)] - (1))], _mm_mul_pd( fact[2 - (1)], gpcar[1 - (1)
      + (ndime) * (jnode - (1) + (mnode) * (igaus - (1)))] ) );\n          elauu[idof[2
      - (1)] - (1) + ((pnode) * (ndime)) * (jdof[0 - (1)] - (1))] = _mm_add_pd( elauu[idof[2
      - (1)] - (1) + ((pnode) * (ndime)) * (jdof[0 - (1)] - (1))], _mm_mul_pd( fact[3
      - (1)], gpcar[1 - (1) + (ndime) * (jnode - (1) + (mnode) * (igaus - (1)))] )
      );\n          elauu[idof[0 - (1)] - (1) + ((pnode) * (ndime)) * (jdof[1 - (1)]
      - (1))] = _mm_add_pd( elauu[idof[0 - (1)] - (1) + ((pnode) * (ndime)) * (jdof[1
      - (1)] - (1))], _mm_mul_pd( fact[1 - (1)], gpcar[2 - (1) + (ndime) * (jnode
      - (1) + (mnode) * (igaus - (1)))] ) );\n          elauu[idof[1 - (1)] - (1)
      + ((pnode) * (ndime)) * (jdof[1 - (1)] - (1))] = _mm_add_pd( _mm_add_pd( elauu[idof[1
      - (1)] - (1) + ((pnode) * (ndime)) * (jdof[1 - (1)] - (1))], _mm_mul_pd( fact[2
      - (1)], gpcar[2 - (1) + (ndime) * (jnode - (1) + (mnode) * (igaus - (1)))] )
      ), fact[5 - (1)] );\n          elauu[idof[2 - (1)] - (1) + ((pnode) * (ndime))
      * (jdof[1 - (1)] - (1))] = _mm_add_pd( elauu[idof[2 - (1)] - (1) + ((pnode)
      * (ndime)) * (jdof[1 - (1)] - (1))], _mm_mul_pd( fact[3 - (1)], gpcar[2 - (1)
      + (ndime) * (jnode - (1) + (mnode) * (igaus - (1)))] ) );\n          elauu[idof[0
      - (1)] - (1) + ((pnode) * (ndime)) * (jdof[2 - (1)] - (1))] = _mm_add_pd( elauu[idof[0
      - (1)] - (1) + ((pnode) * (ndime)) * (jdof[2 - (1)] - (1))], _mm_mul_pd( fact[1
      - (1)], gpcar[3 - (1) + (ndime) * (jnode - (1) + (mnode) * (igaus - (1)))] )
      );\n          elauu[idof[1 - (1)] - (1) + ((pnode) * (ndime)) * (jdof[2 - (1)]
      - (1))] = _mm_add_pd( elauu[idof[1 - (1)] - (1) + ((pnode) * (ndime)) * (jdof[2
      - (1)] - (1))], _mm_mul_pd( fact[2 - (1)], gpcar[3 - (1) + (ndime) * (jnode
      - (1) + (mnode) * (igaus - (1)))] ) );\n          elauu[idof[2 - (1)] - (1)
      + ((pnode) * (ndime)) * (jdof[2 - (1)] - (1))] = _mm_add_pd( _mm_add_pd( elauu[idof[2
      - (1)] - (1) + ((pnode) * (ndime)) * (jdof[2 - (1)] - (1))], _mm_mul_pd( fact[3
      - (1)], gpcar[3 - (1) + (ndime) * (jnode - (1) + (mnode) * (igaus - (1)))] )
      ), fact[5 - (1)] );\n        }\n      }\n    }\n  }\n}\n"
    ? :kernel: :ref
      :nest: 3
    : ! "function pabdf_nsi(x) result(y)\n  integer,intent(in) :: x \n  real :: y\n
      \ y = 1.0\nend function pabdf_nsi\n     subroutine nsi_element_assembly_split_oss(&\n
      \    pnode,pgaus,gpden,gpvis,gppor,gpsp1,gpsp2,gpvol,   &\n     gpsha,gpcar,gpadv,gpvep,gpgrp,gprhs,gprhc,gpvel,
      \  &\n     gpsgs,elvel,elpre,elbub,elauu,elaup,elapp,elapu,   &\n     elrbu,elrbp,dtinv_loc,dtsgs,pbubl,gpsha_bub,
      \      &\n     gpcar_bub,elauq,elapq,elaqu,elaqp,elaqq,elrbq,&\n     ! Original
      global variables\n     kfl_lumped,&\n     mnode,ntens,&\n     kfl_duatss,&\n
      \    fact_duatss,&\n     kfl_stabi_nsi,&\n     fvins_nsi,fcons_nsi,bemol_nsi,kfl_regim_nsi,&\n
      \    fvela_nsi,kfl_rmom2_nsi,kfl_press_nsi,&\n     kfl_p1ve2_nsi,kfl_linea_nsi,&\n
      \    kfl_confi_nsi,nbdfp_nsi,kfl_sgsti_nsi,&\n     kfl_nota1_nsi,kfl_limit_nsi,kfl_penal_nsi,&\n
      \    penal_nsi,&\n     kfl_bubbl_nsi,&\n     ndime,agrau,wgrgr)\n\n       integer,
      \    parameter  :: ip    = 4               ! 4-byte integer\n  integer,     parameter
      \ :: rp    = 8               ! Double precision \n\n  real(rp),    parameter
      \ :: zeror = epsilon(1.0_rp) ! Almost zero\n  integer(ip), parameter  :: TET04
      = 30              ! 3D \n  integer(ip), parameter  :: TET10 = 31              !
      3D \n  integer(ip), parameter  :: PYR05 = 32              ! 3D \n  integer(ip),
      parameter  :: PYR14 = 33              ! 3D \n  integer(ip), parameter  :: PEN06
      = 34              ! 3D  \n  integer(ip), parameter  :: PEN15 = 35              !
      3D \n  integer(ip), parameter  :: PEN18 = 36              ! 3D \n  integer(ip),
      parameter  :: HEX08 = 37              ! 3D \n  integer(ip), parameter  :: HEX20
      = 38              ! 3D \n  integer(ip), parameter  :: HEX27 = 39              !
      3D \n  integer(ip), parameter  :: HEX64 = 40              ! 3D \n  integer(ip),
      parameter  :: SHELL = 51              ! 3D shell element\n  integer(ip), parameter
      \ :: BAR3D = 52              ! 3D bar element\n\n\n     integer(ip), intent(in)
      \   :: ndime \n     integer(ip), intent(in)    :: kfl_lumped\n     integer(ip),
      intent(in)    :: mnode\n     integer(ip), intent(in)    :: ntens\n     integer(ip),
      intent(in)    :: kfl_duatss\n     integer(ip), intent(in)    :: fact_duatss\n
      \    integer(ip), intent(in)    :: kfl_stabi_nsi\n     real(rp),    intent(in)
      \   :: fvins_nsi\n     real(rp),    intent(in)    :: fcons_nsi\n     real(rp),
      \   intent(in)    :: bemol_nsi\n     integer(ip), intent(in)    :: kfl_regim_nsi\n
      \    real(rp),    intent(in)    :: fvela_nsi(3)\n     integer(ip), intent(in)
      \   :: kfl_rmom2_nsi\n     integer(ip), intent(in)    :: kfl_press_nsi\n     integer(ip),
      intent(in)    :: kfl_p1ve2_nsi\n     integer(ip), intent(in)    :: kfl_linea_nsi\n
      \    integer(ip), intent(in)    :: kfl_confi_nsi\n     integer(ip), intent(in)
      \   :: nbdfp_nsi\n     integer(ip), intent(in)    :: kfl_sgsti_nsi\n     integer(ip),
      intent(in)    :: kfl_nota1_nsi\n     integer(ip), intent(in)    :: kfl_limit_nsi\n
      \    integer(ip), intent(in)    :: kfl_penal_nsi\n     real(rp),    intent(in)
      \   :: penal_nsi\n     integer(ip), intent(in)    :: kfl_bubbl_nsi\n\n     integer(ip),
      intent(in)    :: pnode,pgaus\n     real(rp),    intent(in)    :: gpden(2,pgaus)\n
      \    real(rp),    intent(in)    :: gpvis(2,pgaus)\n     real(rp),    intent(in)
      \   :: gppor(2,pgaus)\n     real(rp),    intent(in)    :: gpsp1(2,pgaus)\n     real(rp),
      \   intent(in)    :: gpsp2(2,pgaus)\n     real(rp),    intent(in)    :: gpvol(2,pgaus)\n
      \    real(rp),    intent(in)    :: gpsha(2,pnode,pgaus)\n     real(rp),    intent(in)
      \   :: gpcar(2,ndime,mnode,pgaus)\n     real(rp),    intent(in)    :: gpadv(2,ndime,pgaus)\n
      \    real(rp),    intent(inout) :: gpvep(2,ndime,pgaus)\n     real(rp),    intent(inout)
      :: gpgrp(2,ndime,pgaus)\n     real(rp),    intent(inout) :: gprhs(2,ndime,pgaus)\n
      \    real(rp),    intent(inout) :: gprhc(2,pgaus)\n     real(rp),    intent(in)
      \   :: gpvel(2,ndime,pgaus,*)\n     real(rp),    intent(in)    :: gpsgs(2,ndime,pgaus,*)\n
      \    real(rp),    intent(in)    :: elvel(2,ndime,pnode,*)\n     real(rp),    intent(in)
      \   :: elpre(2,pnode,*)\n     real(rp),    intent(in)    :: elbub(2)\n\n     real(rp),
      \   intent(out)   :: wgrgr(2,pnode,pnode,pgaus)\n     real(rp),    intent(out)
      \  :: agrau(2,pnode,pgaus)\n\n     ! Matrices\n     real(rp),    intent(out)
      \  :: elauu(2,pnode*ndime,pnode*ndime)\n     real(rp),    intent(out)   :: elaup(2,pnode*ndime,pnode)\n
      \    real(rp),    intent(out)   :: elapp(2,pnode,pnode)\n     real(rp),    intent(out)
      \  :: elapu(2,pnode,pnode*ndime)\n     real(rp),    intent(out)   :: elrbu(2,ndime,pnode)\n
      \    real(rp),    intent(out)   :: elrbp(2,pnode)\n     ! Others\n     real(rp),
      \   intent(in)    :: dtinv_loc(2)\n     real(rp),    intent(in)    :: dtsgs(2)\n
      \    integer(ip), intent(in)    :: pbubl(2)\n     real(rp),    intent(in)    ::
      gpsha_bub(2,pgaus)\n     real(rp),    intent(in)    :: gpcar_bub(2,ndime,pgaus)\n
      \    ! Enrichement Element matrices\n     real(rp),    intent(out)   :: elauq(2,pnode*ndime,1)\n
      \    real(rp),    intent(out)   :: elapq(2,pnode,1)\n     real(rp),    intent(out)
      \  :: elaqu(2,1,pnode*ndime)\n     real(rp),    intent(out)   :: elaqp(2,1,pnode)\n
      \    real(rp),    intent(out)   :: elaqq(2,1,1)\n     real(rp),    intent(out)
      \  :: elrbq(2,1)\n     ! Local arrays\n     real(rp)                   :: gpsp1_p(2,pgaus)\n
      \    real(rp)                   :: gpsp1_v(2,pgaus)\n     real(rp)                   ::
      gpsp2_v(2,pgaus)\n     real(rp)                   :: c1(2)\n     real(rp)                   ::
      c2(2)\n     real(rp)                   :: c3(2)\n     real(rp)                   ::
      c4(2)\n     real(rp)                   :: alpha(2)\n     real(rp)                   ::
      beta(2)\n     real(rp)                   :: fact0(2)\n     real(rp)                   ::
      fact1(2)\n     real(rp)                   :: fact2(2)\n     real(rp)                   ::
      fact3(2)\n     real(rp)                   :: fact4(2)\n     real(rp)                   ::
      fact5(2)\n     real(rp)                   :: fact6(2)\n     real(rp)                   ::
      fact7(2)\n     real(rp)                   :: fact8(2)\n     real(rp)                   ::
      gpveo(2,3)\n     real(rp)                   :: fact1_p(2)\n     real(rp)                   ::
      dtinv_mod(2)\n     integer(ip)                :: inode,jnode,jdime\n     integer(ip)
      \               :: idofv,jdof2,jdof3,ivect\n     integer(ip)                ::
      idof1,idof3,idof2,igaus\n     integer(ip)                :: idime,jdof1,jdofv,itime\n
      \  dtinv_mod = dtinv_loc\n\n   gpsp1_p = gpsp1\n   gpsp1_v = gpsp1\n   gpsp2_v
      = gpsp2\n\n   if( kfl_nota1_nsi == 1 ) gpsp1_v = 0.0_rp \n\n   elrbp = 0.0_rp\n
      \  elrbu = 0.0_rp\n   elapp = 0.0_rp\n   elauu = 0.0_rp\n   elaup = 0.0_rp\n
      \  elapu = 0.0_rp\n  if( fvins_nsi > 0.9_rp ) then\n     do igaus = 1,pgaus\n
      \       do inode = 1,pnode\n           do idime = 1,ndime\n              idofv
      = (inode-1)*ndime + idime\n              do jnode = 1,pnode\n                 fact1(1:2)
      = gpvis(1:2,igaus) * gpvol(1:2,igaus) * gpcar(1:2,idime,jnode,igaus)  &\n&   \n
      \                do jdime = 1,ndime\n                    jdofv                       =
      (jnode-1)*ndime + jdime\n                    elauu(1:2,idofv,jdofv) = elauu(1:2,idofv,jdofv)
      + fact1(1:2) * gpcar(1:2,jdime&\n&,inode,igaus)\n                 end do\n              end
      do\n              if( fvins_nsi == 2.0_rp ) then\n                 fact1(1:2)
      = -2.0_rp / 3.0_rp * gpvis(1:2,igaus) * gpvol(1:2,igaus) * gpcar(1:2,i&\n&dime,inode,igaus)\n
      \                do jnode = 1,pnode\n                    do jdime = 1,ndime\n
      \                      jdofv                       = (jnode-1)*ndime + jdime\n
      \                      elauu(1:2,idofv,jdofv) = elauu(1:2,idofv,jdofv) + fact1(1:2)
      * gpcar(1:2,jd&\n&ime,jnode,igaus)\n                    end do\n                 end
      do\n              end if\n           end do\n        end do\n     end do\n  end
      if\nend subroutine nsi_element_assembly_split_oss\n"
    ? :kernel: :boast
      :nest: 3
    : ! "double pabdf_nsi(const int32_t x){\n  double y;\n  y = 1.0;\n  return y;\n}\nvoid
      nsi_element_assembly_split_oss(const int32_t pnode, const int32_t pgaus, const
      __m128d * gpden, const __m128d * gpvis, const __m128d * gppor, const __m128d
      * gpsp1, const __m128d * gpsp2, const __m128d * gpvol, const __m128d * gpsha,
      const __m128d * gpcar, const __m128d * gpadv, __m128d * gpvep, __m128d * gpgrp,
      __m128d * gprhs, __m128d * gprhc, const __m128d * gpvel, const __m128d * gpsgs,
      const __m128d * elvel, const __m128d * elpre, const __m128d * elbub, __m128d
      * elauu, __m128d * elaup, __m128d * elapp, __m128d * elapu, __m128d * elrbu,
      __m128d * elrbp, const __m128d * dtinv_loc, const __m128d * dtsgs, const __m64
      * pbubl, const __m128d * gpsha_bub, const __m128d * gpcar_bub, __m128d * elauq,
      __m128d * elapq, __m128d * elaqu, __m128d * elaqp, __m128d * elaqq, __m128d
      * elrbq, const int32_t kfl_lumped, const int32_t mnode, const int32_t ntens,
      const int32_t kfl_duatss, const int32_t fact_duatss, const int32_t kfl_stabi_nsi,
      const double fvins_nsi, const double fcons_nsi, const double bemol_nsi, const
      int32_t kfl_regim_nsi, const double * fvela_nsi, const int32_t kfl_rmom2_nsi,
      const int32_t kfl_press_nsi, const int32_t kfl_p1ve2_nsi, const int32_t kfl_linea_nsi,
      const int32_t kfl_confi_nsi, const int32_t nbdfp_nsi, const int32_t kfl_sgsti_nsi,
      const int32_t kfl_nota1_nsi, const int32_t kfl_limit_nsi, const int32_t kfl_penal_nsi,
      const double penal_nsi, const int32_t kfl_bubbl_nsi, const int32_t ndime, __m128d
      * agrau, __m128d * wgrgr){\n  __m128d gpsp1_p[(pgaus)];\n  __m128d gpsp1_v[(pgaus)];\n
      \ __m128d gpsp2_v[(pgaus)];\n  __m128d c1[(1)];\n  __m128d c2[(1)];\n  __m128d
      c3[(1)];\n  __m128d c4[(1)];\n  __m128d alpha[(1)];\n  __m128d beta[(1)];\n
      \ __m128d gpveo[(3)];\n  __m128d fact1_p[(1)];\n  __m128d dtinv_mod[(1)];\n
      \ int32_t inode;\n  int32_t jnode;\n  int32_t jdime;\n  int32_t idofv;\n  int32_t
      ivect;\n  int32_t igaus;\n  int32_t idime;\n  int32_t jdofv;\n  int32_t itime;\n
      \ __m128d fact[(8)];\n  int32_t idof[(3)];\n  int32_t jdof[(3)];\n  memcpy(dtinv_mod,
      dtinv_loc, sizeof(dtinv_mod));\n  memcpy(gpsp1_p, gpsp1, sizeof(gpsp1_p));\n
      \ memcpy(gpsp1_v, gpsp1, sizeof(gpsp1_v));\n  memcpy(gpsp2_v, gpsp2, sizeof(gpsp2_v));\n\n
      \ if (kfl_nota1_nsi == 1) memset(gpsp1_v, 0, sizeof(gpsp1_v));\n\n  memset(elrbp,
      0, sizeof(__m128d) * pnode);\n  memset(elrbu, 0, sizeof(__m128d) * ndime * pnode);\n
      \ memset(elapp, 0, sizeof(__m128d) * pnode * pnode);\n  memset(elauu, 0, sizeof(__m128d)
      * pnode * ndime * pnode * ndime);\n  memset(elaup, 0, sizeof(__m128d) * pnode
      * ndime * pnode);\n  memset(elapu, 0, sizeof(__m128d) * pnode * pnode * ndime);\n
      \ if (fvins_nsi > 0.9) {\n    if (ndime == 2) {\n      for (igaus = 1; igaus
      <= pgaus; igaus += 1) {\n        for (inode = 1; inode <= pnode; inode += 1)
      {\n          for (idime = 1; idime <= ndime; idime += 1) {\n            idofv
      = (inode - (1)) * (ndime) + idime;\n            for (jnode = 1; jnode <= pnode;
      jnode += 1) {\n              fact[1 - (1)] = _mm_mul_pd( _mm_mul_pd( gpvis[igaus
      - (1)], gpvol[igaus - (1)] ), gpcar[idime - (1) + (ndime) * (jnode - (1) + (mnode)
      * (igaus - (1)))] );\n              jdofv = (jnode - (1)) * (ndime) + 1;\n              elauu[idofv
      - (1) + ((pnode) * (ndime)) * (jdofv - (1))] = _mm_add_pd( elauu[idofv - (1)
      + ((pnode) * (ndime)) * (jdofv - (1))], _mm_mul_pd( fact[1 - (1)], gpcar[1 -
      (1) + (ndime) * (inode - (1) + (mnode) * (igaus - (1)))] ) );\n              jdofv
      = (jnode - (1)) * (ndime) + 2;\n              elauu[idofv - (1) + ((pnode) *
      (ndime)) * (jdofv - (1))] = _mm_add_pd( elauu[idofv - (1) + ((pnode) * (ndime))
      * (jdofv - (1))], _mm_mul_pd( fact[1 - (1)], gpcar[2 - (1) + (ndime) * (inode
      - (1) + (mnode) * (igaus - (1)))] ) );\n            }\n            if (fvins_nsi
      == 2.0) {\n              fact[1 - (1)] = _mm_mul_pd( _mm_mul_pd( _mm_mul_pd(
      _mm_div_pd( _mm_set1_pd( -2.0 ), _mm_set1_pd( 3.0 ) ), gpvis[igaus - (1)] ),
      gpvol[igaus - (1)] ), gpcar[idime - (1) + (ndime) * (inode - (1) + (mnode) *
      (igaus - (1)))] );\n              for (jnode = 1; jnode <= pnode; jnode += 1)
      {\n                jdofv = (jnode - (1)) * (ndime) + 1;\n                elauu[idofv
      - (1) + ((pnode) * (ndime)) * (jdofv - (1))] = _mm_add_pd( elauu[idofv - (1)
      + ((pnode) * (ndime)) * (jdofv - (1))], _mm_mul_pd( fact[1 - (1)], gpcar[1 -
      (1) + (ndime) * (jnode - (1) + (mnode) * (igaus - (1)))] ) );\n                jdofv
      = (jnode - (1)) * (ndime) + 2;\n                elauu[idofv - (1) + ((pnode)
      * (ndime)) * (jdofv - (1))] = _mm_add_pd( elauu[idofv - (1) + ((pnode) * (ndime))
      * (jdofv - (1))], _mm_mul_pd( fact[1 - (1)], gpcar[2 - (1) + (ndime) * (jnode
      - (1) + (mnode) * (igaus - (1)))] ) );\n              }\n            }\n          }\n
      \       }\n      }\n    } else {\n      for (igaus = 1; igaus <= pgaus; igaus
      += 1) {\n        for (inode = 1; inode <= pnode; inode += 1) {\n          for
      (idime = 1; idime <= ndime; idime += 1) {\n            idofv = (inode - (1))
      * (ndime) + idime;\n            for (jnode = 1; jnode <= pnode; jnode += 1)
      {\n              fact[1 - (1)] = _mm_mul_pd( _mm_mul_pd( gpvis[igaus - (1)],
      gpvol[igaus - (1)] ), gpcar[idime - (1) + (ndime) * (jnode - (1) + (mnode) *
      (igaus - (1)))] );\n              jdofv = (jnode - (1)) * (ndime) + 1;\n              elauu[idofv
      - (1) + ((pnode) * (ndime)) * (jdofv - (1))] = _mm_add_pd( elauu[idofv - (1)
      + ((pnode) * (ndime)) * (jdofv - (1))], _mm_mul_pd( fact[1 - (1)], gpcar[1 -
      (1) + (ndime) * (inode - (1) + (mnode) * (igaus - (1)))] ) );\n              jdofv
      = (jnode - (1)) * (ndime) + 2;\n              elauu[idofv - (1) + ((pnode) *
      (ndime)) * (jdofv - (1))] = _mm_add_pd( elauu[idofv - (1) + ((pnode) * (ndime))
      * (jdofv - (1))], _mm_mul_pd( fact[1 - (1)], gpcar[2 - (1) + (ndime) * (inode
      - (1) + (mnode) * (igaus - (1)))] ) );\n              jdofv = (jnode - (1))
      * (ndime) + 3;\n              elauu[idofv - (1) + ((pnode) * (ndime)) * (jdofv
      - (1))] = _mm_add_pd( elauu[idofv - (1) + ((pnode) * (ndime)) * (jdofv - (1))],
      _mm_mul_pd( fact[1 - (1)], gpcar[3 - (1) + (ndime) * (inode - (1) + (mnode)
      * (igaus - (1)))] ) );\n            }\n            if (fvins_nsi == 2.0) {\n
      \             fact[1 - (1)] = _mm_mul_pd( _mm_mul_pd( _mm_mul_pd( _mm_div_pd(
      _mm_set1_pd( -2.0 ), _mm_set1_pd( 3.0 ) ), gpvis[igaus - (1)] ), gpvol[igaus
      - (1)] ), gpcar[idime - (1) + (ndime) * (inode - (1) + (mnode) * (igaus - (1)))]
      );\n              for (jnode = 1; jnode <= pnode; jnode += 1) {\n                jdofv
      = (jnode - (1)) * (ndime) + 1;\n                elauu[idofv - (1) + ((pnode)
      * (ndime)) * (jdofv - (1))] = _mm_add_pd( elauu[idofv - (1) + ((pnode) * (ndime))
      * (jdofv - (1))], _mm_mul_pd( fact[1 - (1)], gpcar[1 - (1) + (ndime) * (jnode
      - (1) + (mnode) * (igaus - (1)))] ) );\n                jdofv = (jnode - (1))
      * (ndime) + 2;\n                elauu[idofv - (1) + ((pnode) * (ndime)) * (jdofv
      - (1))] = _mm_add_pd( elauu[idofv - (1) + ((pnode) * (ndime)) * (jdofv - (1))],
      _mm_mul_pd( fact[1 - (1)], gpcar[2 - (1) + (ndime) * (jnode - (1) + (mnode)
      * (igaus - (1)))] ) );\n                jdofv = (jnode - (1)) * (ndime) + 3;\n
      \               elauu[idofv - (1) + ((pnode) * (ndime)) * (jdofv - (1))] = _mm_add_pd(
      elauu[idofv - (1) + ((pnode) * (ndime)) * (jdofv - (1))], _mm_mul_pd( fact[1
      - (1)], gpcar[3 - (1) + (ndime) * (jnode - (1) + (mnode) * (igaus - (1)))] )
      );\n              }\n            }\n          }\n        }\n      }\n    }\n
      \ }\n}\n"
    ? :kernel: :ref
      :nest: 4
    : ! "function pabdf_nsi(x) result(y)\n  integer,intent(in) :: x \n  real :: y\n
      \ y = 1.0\nend function pabdf_nsi\n     subroutine nsi_element_assembly_split_oss(&\n
      \    pnode,pgaus,gpden,gpvis,gppor,gpsp1,gpsp2,gpvol,   &\n     gpsha,gpcar,gpadv,gpvep,gpgrp,gprhs,gprhc,gpvel,
      \  &\n     gpsgs,elvel,elpre,elbub,elauu,elaup,elapp,elapu,   &\n     elrbu,elrbp,dtinv_loc,dtsgs,pbubl,gpsha_bub,
      \      &\n     gpcar_bub,elauq,elapq,elaqu,elaqp,elaqq,elrbq,&\n     ! Original
      global variables\n     kfl_lumped,&\n     mnode,ntens,&\n     kfl_duatss,&\n
      \    fact_duatss,&\n     kfl_stabi_nsi,&\n     fvins_nsi,fcons_nsi,bemol_nsi,kfl_regim_nsi,&\n
      \    fvela_nsi,kfl_rmom2_nsi,kfl_press_nsi,&\n     kfl_p1ve2_nsi,kfl_linea_nsi,&\n
      \    kfl_confi_nsi,nbdfp_nsi,kfl_sgsti_nsi,&\n     kfl_nota1_nsi,kfl_limit_nsi,kfl_penal_nsi,&\n
      \    penal_nsi,&\n     kfl_bubbl_nsi,&\n     ndime,agrau,wgrgr)\n\n       integer,
      \    parameter  :: ip    = 4               ! 4-byte integer\n  integer,     parameter
      \ :: rp    = 8               ! Double precision \n\n  real(rp),    parameter
      \ :: zeror = epsilon(1.0_rp) ! Almost zero\n  integer(ip), parameter  :: TET04
      = 30              ! 3D \n  integer(ip), parameter  :: TET10 = 31              !
      3D \n  integer(ip), parameter  :: PYR05 = 32              ! 3D \n  integer(ip),
      parameter  :: PYR14 = 33              ! 3D \n  integer(ip), parameter  :: PEN06
      = 34              ! 3D  \n  integer(ip), parameter  :: PEN15 = 35              !
      3D \n  integer(ip), parameter  :: PEN18 = 36              ! 3D \n  integer(ip),
      parameter  :: HEX08 = 37              ! 3D \n  integer(ip), parameter  :: HEX20
      = 38              ! 3D \n  integer(ip), parameter  :: HEX27 = 39              !
      3D \n  integer(ip), parameter  :: HEX64 = 40              ! 3D \n  integer(ip),
      parameter  :: SHELL = 51              ! 3D shell element\n  integer(ip), parameter
      \ :: BAR3D = 52              ! 3D bar element\n\n\n     integer(ip), intent(in)
      \   :: ndime \n     integer(ip), intent(in)    :: kfl_lumped\n     integer(ip),
      intent(in)    :: mnode\n     integer(ip), intent(in)    :: ntens\n     integer(ip),
      intent(in)    :: kfl_duatss\n     integer(ip), intent(in)    :: fact_duatss\n
      \    integer(ip), intent(in)    :: kfl_stabi_nsi\n     real(rp),    intent(in)
      \   :: fvins_nsi\n     real(rp),    intent(in)    :: fcons_nsi\n     real(rp),
      \   intent(in)    :: bemol_nsi\n     integer(ip), intent(in)    :: kfl_regim_nsi\n
      \    real(rp),    intent(in)    :: fvela_nsi(3)\n     integer(ip), intent(in)
      \   :: kfl_rmom2_nsi\n     integer(ip), intent(in)    :: kfl_press_nsi\n     integer(ip),
      intent(in)    :: kfl_p1ve2_nsi\n     integer(ip), intent(in)    :: kfl_linea_nsi\n
      \    integer(ip), intent(in)    :: kfl_confi_nsi\n     integer(ip), intent(in)
      \   :: nbdfp_nsi\n     integer(ip), intent(in)    :: kfl_sgsti_nsi\n     integer(ip),
      intent(in)    :: kfl_nota1_nsi\n     integer(ip), intent(in)    :: kfl_limit_nsi\n
      \    integer(ip), intent(in)    :: kfl_penal_nsi\n     real(rp),    intent(in)
      \   :: penal_nsi\n     integer(ip), intent(in)    :: kfl_bubbl_nsi\n\n     integer(ip),
      intent(in)    :: pnode,pgaus\n     real(rp),    intent(in)    :: gpden(2,pgaus)\n
      \    real(rp),    intent(in)    :: gpvis(2,pgaus)\n     real(rp),    intent(in)
      \   :: gppor(2,pgaus)\n     real(rp),    intent(in)    :: gpsp1(2,pgaus)\n     real(rp),
      \   intent(in)    :: gpsp2(2,pgaus)\n     real(rp),    intent(in)    :: gpvol(2,pgaus)\n
      \    real(rp),    intent(in)    :: gpsha(2,pnode,pgaus)\n     real(rp),    intent(in)
      \   :: gpcar(2,ndime,mnode,pgaus)\n     real(rp),    intent(in)    :: gpadv(2,ndime,pgaus)\n
      \    real(rp),    intent(inout) :: gpvep(2,ndime,pgaus)\n     real(rp),    intent(inout)
      :: gpgrp(2,ndime,pgaus)\n     real(rp),    intent(inout) :: gprhs(2,ndime,pgaus)\n
      \    real(rp),    intent(inout) :: gprhc(2,pgaus)\n     real(rp),    intent(in)
      \   :: gpvel(2,ndime,pgaus,*)\n     real(rp),    intent(in)    :: gpsgs(2,ndime,pgaus,*)\n
      \    real(rp),    intent(in)    :: elvel(2,ndime,pnode,*)\n     real(rp),    intent(in)
      \   :: elpre(2,pnode,*)\n     real(rp),    intent(in)    :: elbub(2)\n\n     real(rp),
      \   intent(out)   :: wgrgr(2,pnode,pnode,pgaus)\n     real(rp),    intent(out)
      \  :: agrau(2,pnode,pgaus)\n\n     ! Matrices\n     real(rp),    intent(out)
      \  :: elauu(2,pnode*ndime,pnode*ndime)\n     real(rp),    intent(out)   :: elaup(2,pnode*ndime,pnode)\n
      \    real(rp),    intent(out)   :: elapp(2,pnode,pnode)\n     real(rp),    intent(out)
      \  :: elapu(2,pnode,pnode*ndime)\n     real(rp),    intent(out)   :: elrbu(2,ndime,pnode)\n
      \    real(rp),    intent(out)   :: elrbp(2,pnode)\n     ! Others\n     real(rp),
      \   intent(in)    :: dtinv_loc(2)\n     real(rp),    intent(in)    :: dtsgs(2)\n
      \    integer(ip), intent(in)    :: pbubl(2)\n     real(rp),    intent(in)    ::
      gpsha_bub(2,pgaus)\n     real(rp),    intent(in)    :: gpcar_bub(2,ndime,pgaus)\n
      \    ! Enrichement Element matrices\n     real(rp),    intent(out)   :: elauq(2,pnode*ndime,1)\n
      \    real(rp),    intent(out)   :: elapq(2,pnode,1)\n     real(rp),    intent(out)
      \  :: elaqu(2,1,pnode*ndime)\n     real(rp),    intent(out)   :: elaqp(2,1,pnode)\n
      \    real(rp),    intent(out)   :: elaqq(2,1,1)\n     real(rp),    intent(out)
      \  :: elrbq(2,1)\n     ! Local arrays\n     real(rp)                   :: gpsp1_p(2,pgaus)\n
      \    real(rp)                   :: gpsp1_v(2,pgaus)\n     real(rp)                   ::
      gpsp2_v(2,pgaus)\n     real(rp)                   :: c1(2)\n     real(rp)                   ::
      c2(2)\n     real(rp)                   :: c3(2)\n     real(rp)                   ::
      c4(2)\n     real(rp)                   :: alpha(2)\n     real(rp)                   ::
      beta(2)\n     real(rp)                   :: fact0(2)\n     real(rp)                   ::
      fact1(2)\n     real(rp)                   :: fact2(2)\n     real(rp)                   ::
      fact3(2)\n     real(rp)                   :: fact4(2)\n     real(rp)                   ::
      fact5(2)\n     real(rp)                   :: fact6(2)\n     real(rp)                   ::
      fact7(2)\n     real(rp)                   :: fact8(2)\n     real(rp)                   ::
      gpveo(2,3)\n     real(rp)                   :: fact1_p(2)\n     real(rp)                   ::
      dtinv_mod(2)\n     integer(ip)                :: inode,jnode,jdime\n     integer(ip)
      \               :: idofv,jdof2,jdof3,ivect\n     integer(ip)                ::
      idof1,idof3,idof2,igaus\n     integer(ip)                :: idime,jdof1,jdofv,itime\n
      \  dtinv_mod = dtinv_loc\n\n   gpsp1_p = gpsp1\n   gpsp1_v = gpsp1\n   gpsp2_v
      = gpsp2\n\n   if( kfl_nota1_nsi == 1 ) gpsp1_v = 0.0_rp \n\n   elrbp = 0.0_rp\n
      \  elrbu = 0.0_rp\n   elapp = 0.0_rp\n   elauu = 0.0_rp\n   elaup = 0.0_rp\n
      \  elapu = 0.0_rp\nif( kfl_lumped == 1 ) then \n   if( ndime == 2 ) then\n      stop\n
      \  else\n      do igaus = 1,pgaus\n         gpveo(1:2,1:3) = 0.0_rp\n         do
      inode = 1,pnode\n            do idime = 1,ndime\n               gpveo(1:2,idime)
      = gpveo(1:2,idime) + elvel(1:2,idime,inode,2) * gpsha(1:2,inode,ig&\n&aus)\n
      \           end do\n         end do\n         do inode = 1,pnode\n            idof1
      \                      = 3*inode-2\n            idof2                       =
      3*inode-1\n            idof3                       = 3*inode\n            fact0(1:2)
      \            = gpvol(1:2,igaus) * gpden(1:2,igaus) * gpsha(1:2,inode,igaus)
      &\n&* dtinv_mod(1:2)\n            elauu(1:2,idof1,idof1) = elauu(1:2,idof1,idof1)
      + fact0(1:2)\n            elauu(1:2,idof2,idof2) = elauu(1:2,idof2,idof2) +
      fact0(1:2)\n            elauu(1:2,idof3,idof3) = elauu(1:2,idof3,idof3) + fact0(1:2)\n
      \           do idime = 1,ndime\n               elrbu(1:2,idime,inode) = elrbu(1:2,idime,inode)
      - fact0(1:2) * gpveo(1:2,idime)\n               elrbu(1:2,idime,inode) = elrbu(1:2,idime,inode)
      + fact0(1:2) * elvel(1:2,idime,inod&\n&e,2)\n            end do\n            do
      jnode = 1,pnode \n               jdof1                       = 3*jnode-2\n               jdof2
      \                      = 3*jnode-1\n               jdof3                       =
      3*jnode\n               elauu(1:2,idof1,jdof1) = elauu(1:2,idof1,jdof1) - fact0(1:2)
      * gpsha(1:2,jnode,igau&\n&s) \n               elauu(1:2,idof2,jdof2) = elauu(1:2,idof2,jdof2)
      - fact0(1:2) * gpsha(1:2,jnode,igau&\n&s) \n               elauu(1:2,idof3,jdof3)
      = elauu(1:2,idof3,jdof3) - fact0(1:2) * gpsha(1:2,jnode,igau&\n&s) \n            end
      do\n         end do\n      end do\n   end if\n\nelse if( kfl_lumped == 2 ) then
      \n   do igaus = 1,pgaus\n      fact0(1:2) = gpvol(1:2,igaus) * gpden(1:2,igaus)
      * dtinv_mod(1:2)\n      do inode = 1, pnode\n         fact1(1:2) = fact0(1:2)
      * gpsha(1:2,inode,igaus)\n         do idime = 1,ndime\n            idof1                       =
      (inode-1) * ndime + idime\n            elauu(1:2,idof1,idof1) = elauu(1:2,idof1,idof1)
      + fact1(1:2)\n            elrbu(1:2,idime,inode) = elrbu(1:2,idime,inode) +
      fact1(1:2) * elvel(1:2,idime,inode,2&\n&)\n         end do\n      end do\n   end
      do\nend if\nend subroutine nsi_element_assembly_split_oss\n"
    ? :kernel: :boast
      :nest: 4
    : ! "double pabdf_nsi(const int32_t x){\n  double y;\n  y = 1.0;\n  return y;\n}\nvoid
      nsi_element_assembly_split_oss(const int32_t pnode, const int32_t pgaus, const
      __m128d * gpden, const __m128d * gpvis, const __m128d * gppor, const __m128d
      * gpsp1, const __m128d * gpsp2, const __m128d * gpvol, const __m128d * gpsha,
      const __m128d * gpcar, const __m128d * gpadv, __m128d * gpvep, __m128d * gpgrp,
      __m128d * gprhs, __m128d * gprhc, const __m128d * gpvel, const __m128d * gpsgs,
      const __m128d * elvel, const __m128d * elpre, const __m128d * elbub, __m128d
      * elauu, __m128d * elaup, __m128d * elapp, __m128d * elapu, __m128d * elrbu,
      __m128d * elrbp, const __m128d * dtinv_loc, const __m128d * dtsgs, const __m64
      * pbubl, const __m128d * gpsha_bub, const __m128d * gpcar_bub, __m128d * elauq,
      __m128d * elapq, __m128d * elaqu, __m128d * elaqp, __m128d * elaqq, __m128d
      * elrbq, const int32_t kfl_lumped, const int32_t mnode, const int32_t ntens,
      const int32_t kfl_duatss, const int32_t fact_duatss, const int32_t kfl_stabi_nsi,
      const double fvins_nsi, const double fcons_nsi, const double bemol_nsi, const
      int32_t kfl_regim_nsi, const double * fvela_nsi, const int32_t kfl_rmom2_nsi,
      const int32_t kfl_press_nsi, const int32_t kfl_p1ve2_nsi, const int32_t kfl_linea_nsi,
      const int32_t kfl_confi_nsi, const int32_t nbdfp_nsi, const int32_t kfl_sgsti_nsi,
      const int32_t kfl_nota1_nsi, const int32_t kfl_limit_nsi, const int32_t kfl_penal_nsi,
      const double penal_nsi, const int32_t kfl_bubbl_nsi, const int32_t ndime, __m128d
      * agrau, __m128d * wgrgr){\n  __m128d gpsp1_p[(pgaus)];\n  __m128d gpsp1_v[(pgaus)];\n
      \ __m128d gpsp2_v[(pgaus)];\n  __m128d c1[(1)];\n  __m128d c2[(1)];\n  __m128d
      c3[(1)];\n  __m128d c4[(1)];\n  __m128d alpha[(1)];\n  __m128d beta[(1)];\n
      \ __m128d gpveo[(3)];\n  __m128d fact1_p[(1)];\n  __m128d dtinv_mod[(1)];\n
      \ int32_t inode;\n  int32_t jnode;\n  int32_t jdime;\n  int32_t idofv;\n  int32_t
      ivect;\n  int32_t igaus;\n  int32_t idime;\n  int32_t jdofv;\n  int32_t itime;\n
      \ __m128d fact[(8)];\n  int32_t idof[(3)];\n  int32_t jdof[(3)];\n  memcpy(dtinv_mod,
      dtinv_loc, sizeof(dtinv_mod));\n  memcpy(gpsp1_p, gpsp1, sizeof(gpsp1_p));\n
      \ memcpy(gpsp1_v, gpsp1, sizeof(gpsp1_v));\n  memcpy(gpsp2_v, gpsp2, sizeof(gpsp2_v));\n\n
      \ if (kfl_nota1_nsi == 1) memset(gpsp1_v, 0, sizeof(gpsp1_v));\n\n  memset(elrbp,
      0, sizeof(__m128d) * pnode);\n  memset(elrbu, 0, sizeof(__m128d) * ndime * pnode);\n
      \ memset(elapp, 0, sizeof(__m128d) * pnode * pnode);\n  memset(elauu, 0, sizeof(__m128d)
      * pnode * ndime * pnode * ndime);\n  memset(elaup, 0, sizeof(__m128d) * pnode
      * ndime * pnode);\n  memset(elapu, 0, sizeof(__m128d) * pnode * pnode * ndime);\n
      \ if (kfl_lumped == 1) {\n    if (ndime == 2) {\n    } else {\n      for (igaus
      = 1; igaus <= pgaus; igaus += 1) {\n                  memset(gpveo,0,sizeof(gpveo));\n
      \       for (inode = 1; inode <= pnode; inode += 1) {\n          gpveo[1 - (1)]
      = _mm_add_pd( gpveo[1 - (1)], _mm_mul_pd( elvel[1 - (1) + (ndime) * (inode -
      (1) + (pnode) * (2 - (1)))], gpsha[inode - (1) + (pnode) * (igaus - (1))] )
      );\n          gpveo[2 - (1)] = _mm_add_pd( gpveo[2 - (1)], _mm_mul_pd( elvel[2
      - (1) + (ndime) * (inode - (1) + (pnode) * (2 - (1)))], gpsha[inode - (1) +
      (pnode) * (igaus - (1))] ) );\n          gpveo[3 - (1)] = _mm_add_pd( gpveo[3
      - (1)], _mm_mul_pd( elvel[3 - (1) + (ndime) * (inode - (1) + (pnode) * (2 -
      (1)))], gpsha[inode - (1) + (pnode) * (igaus - (1))] ) );\n        }\n        fact[0
      - (1)] = _mm_mul_pd( _mm_mul_pd( gpvol[igaus - (1)], gpden[igaus - (1)] ), dtinv_mod[1
      - (1)] );\n        for (inode = 1; inode <= pnode; inode += 1) {\n          fact[1
      - (1)] = _mm_mul_pd( fact[0 - (1)], gpsha[inode - (1) + (pnode) * (igaus - (1))]
      );\n          idof[1 - (1)] = (inode - (1)) * (3) + 1;\n          elauu[idof[1
      - (1)] - (1) + ((pnode) * (ndime)) * (idof[1 - (1)] - (1))] = _mm_add_pd( elauu[idof[1
      - (1)] - (1) + ((pnode) * (ndime)) * (idof[1 - (1)] - (1))], fact[1 - (1)] );\n
      \         idof[2 - (1)] = (inode - (1)) * (3) + 2;\n          elauu[idof[2 -
      (1)] - (1) + ((pnode) * (ndime)) * (idof[2 - (1)] - (1))] = _mm_add_pd( elauu[idof[2
      - (1)] - (1) + ((pnode) * (ndime)) * (idof[2 - (1)] - (1))], fact[1 - (1)] );\n
      \         idof[3 - (1)] = (inode - (1)) * (3) + 3;\n          elauu[idof[3 -
      (1)] - (1) + ((pnode) * (ndime)) * (idof[3 - (1)] - (1))] = _mm_add_pd( elauu[idof[3
      - (1)] - (1) + ((pnode) * (ndime)) * (idof[3 - (1)] - (1))], fact[1 - (1)] );\n
      \         elrbu[1 - (1) + (ndime) * (inode - (1))] = _mm_sub_pd( elrbu[1 - (1)
      + (ndime) * (inode - (1))], _mm_mul_pd( fact[1 - (1)], gpveo[1 - (1)] ) );\n
      \         elrbu[1 - (1) + (ndime) * (inode - (1))] = _mm_add_pd( elrbu[1 - (1)
      + (ndime) * (inode - (1))], _mm_mul_pd( fact[1 - (1)], elvel[1 - (1) + (ndime)
      * (inode - (1) + (pnode) * (2 - (1)))] ) );\n          elrbu[2 - (1) + (ndime)
      * (inode - (1))] = _mm_sub_pd( elrbu[2 - (1) + (ndime) * (inode - (1))], _mm_mul_pd(
      fact[1 - (1)], gpveo[2 - (1)] ) );\n          elrbu[2 - (1) + (ndime) * (inode
      - (1))] = _mm_add_pd( elrbu[2 - (1) + (ndime) * (inode - (1))], _mm_mul_pd(
      fact[1 - (1)], elvel[2 - (1) + (ndime) * (inode - (1) + (pnode) * (2 - (1)))]
      ) );\n          elrbu[3 - (1) + (ndime) * (inode - (1))] = _mm_sub_pd( elrbu[3
      - (1) + (ndime) * (inode - (1))], _mm_mul_pd( fact[1 - (1)], gpveo[3 - (1)]
      ) );\n          elrbu[3 - (1) + (ndime) * (inode - (1))] = _mm_add_pd( elrbu[3
      - (1) + (ndime) * (inode - (1))], _mm_mul_pd( fact[1 - (1)], elvel[3 - (1) +
      (ndime) * (inode - (1) + (pnode) * (2 - (1)))] ) );\n          for (jnode =
      1; jnode <= pnode; jnode += 1) {\n            jdof[1 - (1)] = (jnode - (1))
      * (ndime) + 1;\n            elauu[idof[1 - (1)] - (1) + ((pnode) * (ndime))
      * (jdof[1 - (1)] - (1))] = _mm_sub_pd( elauu[idof[1 - (1)] - (1) + ((pnode)
      * (ndime)) * (jdof[1 - (1)] - (1))], _mm_mul_pd( fact[1 - (1)], gpsha[jnode
      - (1) + (pnode) * (igaus - (1))] ) );\n            jdof[2 - (1)] = (jnode -
      (1)) * (ndime) + 2;\n            elauu[idof[2 - (1)] - (1) + ((pnode) * (ndime))
      * (jdof[2 - (1)] - (1))] = _mm_sub_pd( elauu[idof[2 - (1)] - (1) + ((pnode)
      * (ndime)) * (jdof[2 - (1)] - (1))], _mm_mul_pd( fact[1 - (1)], gpsha[jnode
      - (1) + (pnode) * (igaus - (1))] ) );\n            jdof[3 - (1)] = (jnode -
      (1)) * (ndime) + 3;\n            elauu[idof[3 - (1)] - (1) + ((pnode) * (ndime))
      * (jdof[3 - (1)] - (1))] = _mm_sub_pd( elauu[idof[3 - (1)] - (1) + ((pnode)
      * (ndime)) * (jdof[3 - (1)] - (1))], _mm_mul_pd( fact[1 - (1)], gpsha[jnode
      - (1) + (pnode) * (igaus - (1))] ) );\n          }\n        }\n      }\n    }\n
      \ } else if (kfl_lumped == 2) {\n    if (ndime == 2) {\n      for (igaus = 1;
      igaus <= pgaus; igaus += 1) {\n        fact[0 - (1)] = _mm_mul_pd( _mm_mul_pd(
      gpvol[igaus - (1)], gpden[igaus - (1)] ), dtinv_mod[1 - (1)] );\n        for
      (inode = 1; inode <= pnode; inode += 1) {\n          fact[1 - (1)] = _mm_mul_pd(
      fact[0 - (1)], gpsha[inode - (1) + (pnode) * (igaus - (1))] );\n          idof[1
      - (1)] = (inode - (1)) * (2) + 1;\n          elauu[idof[1 - (1)] - (1) + ((pnode)
      * (ndime)) * (idof[1 - (1)] - (1))] = _mm_add_pd( elauu[idof[1 - (1)] - (1)
      + ((pnode) * (ndime)) * (idof[1 - (1)] - (1))], fact[1 - (1)] );\n          idof[2
      - (1)] = (inode - (1)) * (2) + 2;\n          elauu[idof[2 - (1)] - (1) + ((pnode)
      * (ndime)) * (idof[2 - (1)] - (1))] = _mm_add_pd( elauu[idof[2 - (1)] - (1)
      + ((pnode) * (ndime)) * (idof[2 - (1)] - (1))], fact[1 - (1)] );\n          elrbu[1
      - (1) + (ndime) * (inode - (1))] = _mm_add_pd( elrbu[1 - (1) + (ndime) * (inode
      - (1))], _mm_mul_pd( fact[1 - (1)], elvel[1 - (1) + (ndime) * (inode - (1) +
      (pnode) * (2 - (1)))] ) );\n          elrbu[2 - (1) + (ndime) * (inode - (1))]
      = _mm_add_pd( elrbu[2 - (1) + (ndime) * (inode - (1))], _mm_mul_pd( fact[1 -
      (1)], elvel[2 - (1) + (ndime) * (inode - (1) + (pnode) * (2 - (1)))] ) );\n
      \       }\n      }\n    } else {\n      for (igaus = 1; igaus <= pgaus; igaus
      += 1) {\n        fact[0 - (1)] = _mm_mul_pd( _mm_mul_pd( gpvol[igaus - (1)],
      gpden[igaus - (1)] ), dtinv_mod[1 - (1)] );\n        for (inode = 1; inode <=
      pnode; inode += 1) {\n          fact[1 - (1)] = _mm_mul_pd( fact[0 - (1)], gpsha[inode
      - (1) + (pnode) * (igaus - (1))] );\n          idof[1 - (1)] = (inode - (1))
      * (3) + 1;\n          elauu[idof[1 - (1)] - (1) + ((pnode) * (ndime)) * (idof[1
      - (1)] - (1))] = _mm_add_pd( elauu[idof[1 - (1)] - (1) + ((pnode) * (ndime))
      * (idof[1 - (1)] - (1))], fact[1 - (1)] );\n          idof[2 - (1)] = (inode
      - (1)) * (3) + 2;\n          elauu[idof[2 - (1)] - (1) + ((pnode) * (ndime))
      * (idof[2 - (1)] - (1))] = _mm_add_pd( elauu[idof[2 - (1)] - (1) + ((pnode)
      * (ndime)) * (idof[2 - (1)] - (1))], fact[1 - (1)] );\n          idof[3 - (1)]
      = (inode - (1)) * (3) + 3;\n          elauu[idof[3 - (1)] - (1) + ((pnode) *
      (ndime)) * (idof[3 - (1)] - (1))] = _mm_add_pd( elauu[idof[3 - (1)] - (1) +
      ((pnode) * (ndime)) * (idof[3 - (1)] - (1))], fact[1 - (1)] );\n          elrbu[1
      - (1) + (ndime) * (inode - (1))] = _mm_add_pd( elrbu[1 - (1) + (ndime) * (inode
      - (1))], _mm_mul_pd( fact[1 - (1)], elvel[1 - (1) + (ndime) * (inode - (1) +
      (pnode) * (2 - (1)))] ) );\n          elrbu[2 - (1) + (ndime) * (inode - (1))]
      = _mm_add_pd( elrbu[2 - (1) + (ndime) * (inode - (1))], _mm_mul_pd( fact[1 -
      (1)], elvel[2 - (1) + (ndime) * (inode - (1) + (pnode) * (2 - (1)))] ) );\n
      \         elrbu[3 - (1) + (ndime) * (inode - (1))] = _mm_add_pd( elrbu[3 - (1)
      + (ndime) * (inode - (1))], _mm_mul_pd( fact[1 - (1)], elvel[3 - (1) + (ndime)
      * (inode - (1) + (pnode) * (2 - (1)))] ) );\n        }\n      }\n    }\n  }\n}\n"
    ? :kernel: :ref
      :nest: 5
    : ! "function pabdf_nsi(x) result(y)\n  integer,intent(in) :: x \n  real :: y\n
      \ y = 1.0\nend function pabdf_nsi\n     subroutine nsi_element_assembly_split_oss(&\n
      \    pnode,pgaus,gpden,gpvis,gppor,gpsp1,gpsp2,gpvol,   &\n     gpsha,gpcar,gpadv,gpvep,gpgrp,gprhs,gprhc,gpvel,
      \  &\n     gpsgs,elvel,elpre,elbub,elauu,elaup,elapp,elapu,   &\n     elrbu,elrbp,dtinv_loc,dtsgs,pbubl,gpsha_bub,
      \      &\n     gpcar_bub,elauq,elapq,elaqu,elaqp,elaqq,elrbq,&\n     ! Original
      global variables\n     kfl_lumped,&\n     mnode,ntens,&\n     kfl_duatss,&\n
      \    fact_duatss,&\n     kfl_stabi_nsi,&\n     fvins_nsi,fcons_nsi,bemol_nsi,kfl_regim_nsi,&\n
      \    fvela_nsi,kfl_rmom2_nsi,kfl_press_nsi,&\n     kfl_p1ve2_nsi,kfl_linea_nsi,&\n
      \    kfl_confi_nsi,nbdfp_nsi,kfl_sgsti_nsi,&\n     kfl_nota1_nsi,kfl_limit_nsi,kfl_penal_nsi,&\n
      \    penal_nsi,&\n     kfl_bubbl_nsi,&\n     ndime,agrau,wgrgr)\n\n       integer,
      \    parameter  :: ip    = 4               ! 4-byte integer\n  integer,     parameter
      \ :: rp    = 8               ! Double precision \n\n  real(rp),    parameter
      \ :: zeror = epsilon(1.0_rp) ! Almost zero\n  integer(ip), parameter  :: TET04
      = 30              ! 3D \n  integer(ip), parameter  :: TET10 = 31              !
      3D \n  integer(ip), parameter  :: PYR05 = 32              ! 3D \n  integer(ip),
      parameter  :: PYR14 = 33              ! 3D \n  integer(ip), parameter  :: PEN06
      = 34              ! 3D  \n  integer(ip), parameter  :: PEN15 = 35              !
      3D \n  integer(ip), parameter  :: PEN18 = 36              ! 3D \n  integer(ip),
      parameter  :: HEX08 = 37              ! 3D \n  integer(ip), parameter  :: HEX20
      = 38              ! 3D \n  integer(ip), parameter  :: HEX27 = 39              !
      3D \n  integer(ip), parameter  :: HEX64 = 40              ! 3D \n  integer(ip),
      parameter  :: SHELL = 51              ! 3D shell element\n  integer(ip), parameter
      \ :: BAR3D = 52              ! 3D bar element\n\n\n     integer(ip), intent(in)
      \   :: ndime \n     integer(ip), intent(in)    :: kfl_lumped\n     integer(ip),
      intent(in)    :: mnode\n     integer(ip), intent(in)    :: ntens\n     integer(ip),
      intent(in)    :: kfl_duatss\n     integer(ip), intent(in)    :: fact_duatss\n
      \    integer(ip), intent(in)    :: kfl_stabi_nsi\n     real(rp),    intent(in)
      \   :: fvins_nsi\n     real(rp),    intent(in)    :: fcons_nsi\n     real(rp),
      \   intent(in)    :: bemol_nsi\n     integer(ip), intent(in)    :: kfl_regim_nsi\n
      \    real(rp),    intent(in)    :: fvela_nsi(3)\n     integer(ip), intent(in)
      \   :: kfl_rmom2_nsi\n     integer(ip), intent(in)    :: kfl_press_nsi\n     integer(ip),
      intent(in)    :: kfl_p1ve2_nsi\n     integer(ip), intent(in)    :: kfl_linea_nsi\n
      \    integer(ip), intent(in)    :: kfl_confi_nsi\n     integer(ip), intent(in)
      \   :: nbdfp_nsi\n     integer(ip), intent(in)    :: kfl_sgsti_nsi\n     integer(ip),
      intent(in)    :: kfl_nota1_nsi\n     integer(ip), intent(in)    :: kfl_limit_nsi\n
      \    integer(ip), intent(in)    :: kfl_penal_nsi\n     real(rp),    intent(in)
      \   :: penal_nsi\n     integer(ip), intent(in)    :: kfl_bubbl_nsi\n\n     integer(ip),
      intent(in)    :: pnode,pgaus\n     real(rp),    intent(in)    :: gpden(2,pgaus)\n
      \    real(rp),    intent(in)    :: gpvis(2,pgaus)\n     real(rp),    intent(in)
      \   :: gppor(2,pgaus)\n     real(rp),    intent(in)    :: gpsp1(2,pgaus)\n     real(rp),
      \   intent(in)    :: gpsp2(2,pgaus)\n     real(rp),    intent(in)    :: gpvol(2,pgaus)\n
      \    real(rp),    intent(in)    :: gpsha(2,pnode,pgaus)\n     real(rp),    intent(in)
      \   :: gpcar(2,ndime,mnode,pgaus)\n     real(rp),    intent(in)    :: gpadv(2,ndime,pgaus)\n
      \    real(rp),    intent(inout) :: gpvep(2,ndime,pgaus)\n     real(rp),    intent(inout)
      :: gpgrp(2,ndime,pgaus)\n     real(rp),    intent(inout) :: gprhs(2,ndime,pgaus)\n
      \    real(rp),    intent(inout) :: gprhc(2,pgaus)\n     real(rp),    intent(in)
      \   :: gpvel(2,ndime,pgaus,*)\n     real(rp),    intent(in)    :: gpsgs(2,ndime,pgaus,*)\n
      \    real(rp),    intent(in)    :: elvel(2,ndime,pnode,*)\n     real(rp),    intent(in)
      \   :: elpre(2,pnode,*)\n     real(rp),    intent(in)    :: elbub(2)\n\n     real(rp),
      \   intent(out)   :: wgrgr(2,pnode,pnode,pgaus)\n     real(rp),    intent(out)
      \  :: agrau(2,pnode,pgaus)\n\n     ! Matrices\n     real(rp),    intent(out)
      \  :: elauu(2,pnode*ndime,pnode*ndime)\n     real(rp),    intent(out)   :: elaup(2,pnode*ndime,pnode)\n
      \    real(rp),    intent(out)   :: elapp(2,pnode,pnode)\n     real(rp),    intent(out)
      \  :: elapu(2,pnode,pnode*ndime)\n     real(rp),    intent(out)   :: elrbu(2,ndime,pnode)\n
      \    real(rp),    intent(out)   :: elrbp(2,pnode)\n     ! Others\n     real(rp),
      \   intent(in)    :: dtinv_loc(2)\n     real(rp),    intent(in)    :: dtsgs(2)\n
      \    integer(ip), intent(in)    :: pbubl(2)\n     real(rp),    intent(in)    ::
      gpsha_bub(2,pgaus)\n     real(rp),    intent(in)    :: gpcar_bub(2,ndime,pgaus)\n
      \    ! Enrichement Element matrices\n     real(rp),    intent(out)   :: elauq(2,pnode*ndime,1)\n
      \    real(rp),    intent(out)   :: elapq(2,pnode,1)\n     real(rp),    intent(out)
      \  :: elaqu(2,1,pnode*ndime)\n     real(rp),    intent(out)   :: elaqp(2,1,pnode)\n
      \    real(rp),    intent(out)   :: elaqq(2,1,1)\n     real(rp),    intent(out)
      \  :: elrbq(2,1)\n     ! Local arrays\n     real(rp)                   :: gpsp1_p(2,pgaus)\n
      \    real(rp)                   :: gpsp1_v(2,pgaus)\n     real(rp)                   ::
      gpsp2_v(2,pgaus)\n     real(rp)                   :: c1(2)\n     real(rp)                   ::
      c2(2)\n     real(rp)                   :: c3(2)\n     real(rp)                   ::
      c4(2)\n     real(rp)                   :: alpha(2)\n     real(rp)                   ::
      beta(2)\n     real(rp)                   :: fact0(2)\n     real(rp)                   ::
      fact1(2)\n     real(rp)                   :: fact2(2)\n     real(rp)                   ::
      fact3(2)\n     real(rp)                   :: fact4(2)\n     real(rp)                   ::
      fact5(2)\n     real(rp)                   :: fact6(2)\n     real(rp)                   ::
      fact7(2)\n     real(rp)                   :: fact8(2)\n     real(rp)                   ::
      gpveo(2,3)\n     real(rp)                   :: fact1_p(2)\n     real(rp)                   ::
      dtinv_mod(2)\n     integer(ip)                :: inode,jnode,jdime\n     integer(ip)
      \               :: idofv,jdof2,jdof3,ivect\n     integer(ip)                ::
      idof1,idof3,idof2,igaus\n     integer(ip)                :: idime,jdof1,jdofv,itime\n
      \  dtinv_mod = dtinv_loc\n\n   gpsp1_p = gpsp1\n   gpsp1_v = gpsp1\n   gpsp2_v
      = gpsp2\n\n   if( kfl_nota1_nsi == 1 ) gpsp1_v = 0.0_rp \n\n   elrbp = 0.0_rp\n
      \  elrbu = 0.0_rp\n   elapp = 0.0_rp\n   elauu = 0.0_rp\n   elaup = 0.0_rp\n
      \  elapu = 0.0_rp\n if( ndime == 2 ) then\n    do igaus = 1,pgaus\n       do
      inode = 1,pnode\n          idof1 = 2*inode-1\n          idof2 = 2*inode\n          do
      jnode = 1,pnode\n             fact0(1:2)             = gpvol(1:2,igaus)       *
      gpsha(1:2,jnode,igaus) \n             fact1(1:2)             = fact0(1:2)             *
      gpcar(1:2,1,inode,igaus)\n             fact2(1:2)             = fact0(1:2)             *
      gpcar(1:2,2,inode,igaus)\n             elapu(1:2,jnode,idof1) = elapu(1:2,jnode,idof1)
      + fact1(1:2)\n             elapu(1:2,jnode,idof2) = elapu(1:2,jnode,idof2) +
      fact2(1:2)\n             elaup(1:2,idof1,jnode) = elaup(1:2,idof1,jnode) - fact1(1:2)\n
      \            elaup(1:2,idof2,jnode) = elaup(1:2,idof2,jnode) - fact2(1:2)\n
      \         end do\n       end do\n    end do\n else\n    do igaus = 1,pgaus\n
      \      do inode = 1,pnode\n          idof1 = 3*inode-2\n          idof2 = 3*inode-1\n
      \         idof3 = 3*inode\n          do jnode = 1,pnode\n             fact0(1:2)
      \            = gpvol(1:2,igaus)       * gpsha(1:2,jnode,igaus) \n             fact1(1:2)
      \            = fact0(1:2)             * gpcar(1:2,1,inode,igaus)\n             fact2(1:2)
      \            = fact0(1:2)             * gpcar(1:2,2,inode,igaus)\n             fact3(1:2)
      \            = fact0(1:2)             * gpcar(1:2,3,inode,igaus)\n             elapu(1:2,jnode,idof1)
      = elapu(1:2,jnode,idof1) + fact1(1:2)\n             elapu(1:2,jnode,idof2) =
      elapu(1:2,jnode,idof2) + fact2(1:2)\n             elapu(1:2,jnode,idof3) = elapu(1:2,jnode,idof3)
      + fact3(1:2) \n             elaup(1:2,idof1,jnode) = elaup(1:2,idof1,jnode)
      - fact1(1:2)\n             elaup(1:2,idof2,jnode) = elaup(1:2,idof2,jnode) -
      fact2(1:2)\n             elaup(1:2,idof3,jnode) = elaup(1:2,idof3,jnode) - fact3(1:2)\n
      \         end do\n       end do\n    end do\n end if\nend subroutine nsi_element_assembly_split_oss\n"
    ? :kernel: :boast
      :nest: 5
    : ! "double pabdf_nsi(const int32_t x){\n  double y;\n  y = 1.0;\n  return y;\n}\nvoid
      nsi_element_assembly_split_oss(const int32_t pnode, const int32_t pgaus, const
      __m128d * gpden, const __m128d * gpvis, const __m128d * gppor, const __m128d
      * gpsp1, const __m128d * gpsp2, const __m128d * gpvol, const __m128d * gpsha,
      const __m128d * gpcar, const __m128d * gpadv, __m128d * gpvep, __m128d * gpgrp,
      __m128d * gprhs, __m128d * gprhc, const __m128d * gpvel, const __m128d * gpsgs,
      const __m128d * elvel, const __m128d * elpre, const __m128d * elbub, __m128d
      * elauu, __m128d * elaup, __m128d * elapp, __m128d * elapu, __m128d * elrbu,
      __m128d * elrbp, const __m128d * dtinv_loc, const __m128d * dtsgs, const __m64
      * pbubl, const __m128d * gpsha_bub, const __m128d * gpcar_bub, __m128d * elauq,
      __m128d * elapq, __m128d * elaqu, __m128d * elaqp, __m128d * elaqq, __m128d
      * elrbq, const int32_t kfl_lumped, const int32_t mnode, const int32_t ntens,
      const int32_t kfl_duatss, const int32_t fact_duatss, const int32_t kfl_stabi_nsi,
      const double fvins_nsi, const double fcons_nsi, const double bemol_nsi, const
      int32_t kfl_regim_nsi, const double * fvela_nsi, const int32_t kfl_rmom2_nsi,
      const int32_t kfl_press_nsi, const int32_t kfl_p1ve2_nsi, const int32_t kfl_linea_nsi,
      const int32_t kfl_confi_nsi, const int32_t nbdfp_nsi, const int32_t kfl_sgsti_nsi,
      const int32_t kfl_nota1_nsi, const int32_t kfl_limit_nsi, const int32_t kfl_penal_nsi,
      const double penal_nsi, const int32_t kfl_bubbl_nsi, const int32_t ndime, __m128d
      * agrau, __m128d * wgrgr){\n  __m128d gpsp1_p[(pgaus)];\n  __m128d gpsp1_v[(pgaus)];\n
      \ __m128d gpsp2_v[(pgaus)];\n  __m128d c1[(1)];\n  __m128d c2[(1)];\n  __m128d
      c3[(1)];\n  __m128d c4[(1)];\n  __m128d alpha[(1)];\n  __m128d beta[(1)];\n
      \ __m128d gpveo[(3)];\n  __m128d fact1_p[(1)];\n  __m128d dtinv_mod[(1)];\n
      \ int32_t inode;\n  int32_t jnode;\n  int32_t jdime;\n  int32_t idofv;\n  int32_t
      ivect;\n  int32_t igaus;\n  int32_t idime;\n  int32_t jdofv;\n  int32_t itime;\n
      \ __m128d fact[(8)];\n  int32_t idof[(3)];\n  int32_t jdof[(3)];\n  memcpy(dtinv_mod,
      dtinv_loc, sizeof(dtinv_mod));\n  memcpy(gpsp1_p, gpsp1, sizeof(gpsp1_p));\n
      \ memcpy(gpsp1_v, gpsp1, sizeof(gpsp1_v));\n  memcpy(gpsp2_v, gpsp2, sizeof(gpsp2_v));\n\n
      \ if (kfl_nota1_nsi == 1) memset(gpsp1_v, 0, sizeof(gpsp1_v));\n\n  memset(elrbp,
      0, sizeof(__m128d) * pnode);\n  memset(elrbu, 0, sizeof(__m128d) * ndime * pnode);\n
      \ memset(elapp, 0, sizeof(__m128d) * pnode * pnode);\n  memset(elauu, 0, sizeof(__m128d)
      * pnode * ndime * pnode * ndime);\n  memset(elaup, 0, sizeof(__m128d) * pnode
      * ndime * pnode);\n  memset(elapu, 0, sizeof(__m128d) * pnode * pnode * ndime);\n
      \ if (ndime == 2) {\n    for (igaus = 1; igaus <= pgaus; igaus += 1) {\n      for
      (inode = 1; inode <= pnode; inode += 1) {\n        idof[1 - (1)] = (inode -
      (1)) * (2) + 1;\n        idof[2 - (1)] = (inode - (1)) * (2) + 2;\n        for
      (jnode = 1; jnode <= pnode; jnode += 1) {\n          fact[0 - (1)] = _mm_mul_pd(
      gpvol[igaus - (1)], gpsha[jnode - (1) + (pnode) * (igaus - (1))] );\n          fact[1
      - (1)] = _mm_mul_pd( fact[0 - (1)], gpcar[1 - (1) + (ndime) * (inode - (1) +
      (mnode) * (igaus - (1)))] );\n          elapu[jnode - (1) + (pnode) * (idof[1
      - (1)] - (1))] = _mm_add_pd( elapu[jnode - (1) + (pnode) * (idof[1 - (1)] -
      (1))], fact[1 - (1)] );\n          fact[2 - (1)] = _mm_mul_pd( fact[0 - (1)],
      gpcar[2 - (1) + (ndime) * (inode - (1) + (mnode) * (igaus - (1)))] );\n          elapu[jnode
      - (1) + (pnode) * (idof[2 - (1)] - (1))] = _mm_add_pd( elapu[jnode - (1) + (pnode)
      * (idof[2 - (1)] - (1))], fact[2 - (1)] );\n          elaup[idof[1 - (1)] -
      (1) + ((pnode) * (ndime)) * (jnode - (1))] = _mm_sub_pd( elaup[idof[1 - (1)]
      - (1) + ((pnode) * (ndime)) * (jnode - (1))], fact[1 - (1)] );\n          elaup[idof[2
      - (1)] - (1) + ((pnode) * (ndime)) * (jnode - (1))] = _mm_sub_pd( elaup[idof[2
      - (1)] - (1) + ((pnode) * (ndime)) * (jnode - (1))], fact[2 - (1)] );\n        }\n
      \     }\n    }\n  } else {\n    for (igaus = 1; igaus <= pgaus; igaus += 1)
      {\n      for (inode = 1; inode <= pnode; inode += 1) {\n        idof[1 - (1)]
      = (inode - (1)) * (3) + 1;\n        idof[2 - (1)] = (inode - (1)) * (3) + 2;\n
      \       idof[3 - (1)] = (inode - (1)) * (3) + 3;\n        for (jnode = 1; jnode
      <= pnode; jnode += 1) {\n          fact[0 - (1)] = _mm_mul_pd( gpvol[igaus -
      (1)], gpsha[jnode - (1) + (pnode) * (igaus - (1))] );\n          fact[1 - (1)]
      = _mm_mul_pd( fact[0 - (1)], gpcar[1 - (1) + (ndime) * (inode - (1) + (mnode)
      * (igaus - (1)))] );\n          elapu[jnode - (1) + (pnode) * (idof[1 - (1)]
      - (1))] = _mm_add_pd( elapu[jnode - (1) + (pnode) * (idof[1 - (1)] - (1))],
      fact[1 - (1)] );\n          fact[2 - (1)] = _mm_mul_pd( fact[0 - (1)], gpcar[2
      - (1) + (ndime) * (inode - (1) + (mnode) * (igaus - (1)))] );\n          elapu[jnode
      - (1) + (pnode) * (idof[2 - (1)] - (1))] = _mm_add_pd( elapu[jnode - (1) + (pnode)
      * (idof[2 - (1)] - (1))], fact[2 - (1)] );\n          fact[3 - (1)] = _mm_mul_pd(
      fact[0 - (1)], gpcar[3 - (1) + (ndime) * (inode - (1) + (mnode) * (igaus - (1)))]
      );\n          elapu[jnode - (1) + (pnode) * (idof[3 - (1)] - (1))] = _mm_add_pd(
      elapu[jnode - (1) + (pnode) * (idof[3 - (1)] - (1))], fact[3 - (1)] );\n          elaup[idof[1
      - (1)] - (1) + ((pnode) * (ndime)) * (jnode - (1))] = _mm_sub_pd( elaup[idof[1
      - (1)] - (1) + ((pnode) * (ndime)) * (jnode - (1))], fact[1 - (1)] );\n          elaup[idof[2
      - (1)] - (1) + ((pnode) * (ndime)) * (jnode - (1))] = _mm_sub_pd( elaup[idof[2
      - (1)] - (1) + ((pnode) * (ndime)) * (jnode - (1))], fact[2 - (1)] );\n          elaup[idof[3
      - (1)] - (1) + ((pnode) * (ndime)) * (jnode - (1))] = _mm_sub_pd( elaup[idof[3
      - (1)] - (1) + ((pnode) * (ndime)) * (jnode - (1))], fact[3 - (1)] );\n        }\n
      \     }\n    }\n  }\n}\n"
    ? :kernel: :ref
      :nest: 6
    : ! "function pabdf_nsi(x) result(y)\n  integer,intent(in) :: x \n  real :: y\n
      \ y = 1.0\nend function pabdf_nsi\n     subroutine nsi_element_assembly_split_oss(&\n
      \    pnode,pgaus,gpden,gpvis,gppor,gpsp1,gpsp2,gpvol,   &\n     gpsha,gpcar,gpadv,gpvep,gpgrp,gprhs,gprhc,gpvel,
      \  &\n     gpsgs,elvel,elpre,elbub,elauu,elaup,elapp,elapu,   &\n     elrbu,elrbp,dtinv_loc,dtsgs,pbubl,gpsha_bub,
      \      &\n     gpcar_bub,elauq,elapq,elaqu,elaqp,elaqq,elrbq,&\n     ! Original
      global variables\n     kfl_lumped,&\n     mnode,ntens,&\n     kfl_duatss,&\n
      \    fact_duatss,&\n     kfl_stabi_nsi,&\n     fvins_nsi,fcons_nsi,bemol_nsi,kfl_regim_nsi,&\n
      \    fvela_nsi,kfl_rmom2_nsi,kfl_press_nsi,&\n     kfl_p1ve2_nsi,kfl_linea_nsi,&\n
      \    kfl_confi_nsi,nbdfp_nsi,kfl_sgsti_nsi,&\n     kfl_nota1_nsi,kfl_limit_nsi,kfl_penal_nsi,&\n
      \    penal_nsi,&\n     kfl_bubbl_nsi,&\n     ndime,agrau,wgrgr)\n\n       integer,
      \    parameter  :: ip    = 4               ! 4-byte integer\n  integer,     parameter
      \ :: rp    = 8               ! Double precision \n\n  real(rp),    parameter
      \ :: zeror = epsilon(1.0_rp) ! Almost zero\n  integer(ip), parameter  :: TET04
      = 30              ! 3D \n  integer(ip), parameter  :: TET10 = 31              !
      3D \n  integer(ip), parameter  :: PYR05 = 32              ! 3D \n  integer(ip),
      parameter  :: PYR14 = 33              ! 3D \n  integer(ip), parameter  :: PEN06
      = 34              ! 3D  \n  integer(ip), parameter  :: PEN15 = 35              !
      3D \n  integer(ip), parameter  :: PEN18 = 36              ! 3D \n  integer(ip),
      parameter  :: HEX08 = 37              ! 3D \n  integer(ip), parameter  :: HEX20
      = 38              ! 3D \n  integer(ip), parameter  :: HEX27 = 39              !
      3D \n  integer(ip), parameter  :: HEX64 = 40              ! 3D \n  integer(ip),
      parameter  :: SHELL = 51              ! 3D shell element\n  integer(ip), parameter
      \ :: BAR3D = 52              ! 3D bar element\n\n\n     integer(ip), intent(in)
      \   :: ndime \n     integer(ip), intent(in)    :: kfl_lumped\n     integer(ip),
      intent(in)    :: mnode\n     integer(ip), intent(in)    :: ntens\n     integer(ip),
      intent(in)    :: kfl_duatss\n     integer(ip), intent(in)    :: fact_duatss\n
      \    integer(ip), intent(in)    :: kfl_stabi_nsi\n     real(rp),    intent(in)
      \   :: fvins_nsi\n     real(rp),    intent(in)    :: fcons_nsi\n     real(rp),
      \   intent(in)    :: bemol_nsi\n     integer(ip), intent(in)    :: kfl_regim_nsi\n
      \    real(rp),    intent(in)    :: fvela_nsi(3)\n     integer(ip), intent(in)
      \   :: kfl_rmom2_nsi\n     integer(ip), intent(in)    :: kfl_press_nsi\n     integer(ip),
      intent(in)    :: kfl_p1ve2_nsi\n     integer(ip), intent(in)    :: kfl_linea_nsi\n
      \    integer(ip), intent(in)    :: kfl_confi_nsi\n     integer(ip), intent(in)
      \   :: nbdfp_nsi\n     integer(ip), intent(in)    :: kfl_sgsti_nsi\n     integer(ip),
      intent(in)    :: kfl_nota1_nsi\n     integer(ip), intent(in)    :: kfl_limit_nsi\n
      \    integer(ip), intent(in)    :: kfl_penal_nsi\n     real(rp),    intent(in)
      \   :: penal_nsi\n     integer(ip), intent(in)    :: kfl_bubbl_nsi\n\n     integer(ip),
      intent(in)    :: pnode,pgaus\n     real(rp),    intent(in)    :: gpden(2,pgaus)\n
      \    real(rp),    intent(in)    :: gpvis(2,pgaus)\n     real(rp),    intent(in)
      \   :: gppor(2,pgaus)\n     real(rp),    intent(in)    :: gpsp1(2,pgaus)\n     real(rp),
      \   intent(in)    :: gpsp2(2,pgaus)\n     real(rp),    intent(in)    :: gpvol(2,pgaus)\n
      \    real(rp),    intent(in)    :: gpsha(2,pnode,pgaus)\n     real(rp),    intent(in)
      \   :: gpcar(2,ndime,mnode,pgaus)\n     real(rp),    intent(in)    :: gpadv(2,ndime,pgaus)\n
      \    real(rp),    intent(inout) :: gpvep(2,ndime,pgaus)\n     real(rp),    intent(inout)
      :: gpgrp(2,ndime,pgaus)\n     real(rp),    intent(inout) :: gprhs(2,ndime,pgaus)\n
      \    real(rp),    intent(inout) :: gprhc(2,pgaus)\n     real(rp),    intent(in)
      \   :: gpvel(2,ndime,pgaus,*)\n     real(rp),    intent(in)    :: gpsgs(2,ndime,pgaus,*)\n
      \    real(rp),    intent(in)    :: elvel(2,ndime,pnode,*)\n     real(rp),    intent(in)
      \   :: elpre(2,pnode,*)\n     real(rp),    intent(in)    :: elbub(2)\n\n     real(rp),
      \   intent(out)   :: wgrgr(2,pnode,pnode,pgaus)\n     real(rp),    intent(out)
      \  :: agrau(2,pnode,pgaus)\n\n     ! Matrices\n     real(rp),    intent(out)
      \  :: elauu(2,pnode*ndime,pnode*ndime)\n     real(rp),    intent(out)   :: elaup(2,pnode*ndime,pnode)\n
      \    real(rp),    intent(out)   :: elapp(2,pnode,pnode)\n     real(rp),    intent(out)
      \  :: elapu(2,pnode,pnode*ndime)\n     real(rp),    intent(out)   :: elrbu(2,ndime,pnode)\n
      \    real(rp),    intent(out)   :: elrbp(2,pnode)\n     ! Others\n     real(rp),
      \   intent(in)    :: dtinv_loc(2)\n     real(rp),    intent(in)    :: dtsgs(2)\n
      \    integer(ip), intent(in)    :: pbubl(2)\n     real(rp),    intent(in)    ::
      gpsha_bub(2,pgaus)\n     real(rp),    intent(in)    :: gpcar_bub(2,ndime,pgaus)\n
      \    ! Enrichement Element matrices\n     real(rp),    intent(out)   :: elauq(2,pnode*ndime,1)\n
      \    real(rp),    intent(out)   :: elapq(2,pnode,1)\n     real(rp),    intent(out)
      \  :: elaqu(2,1,pnode*ndime)\n     real(rp),    intent(out)   :: elaqp(2,1,pnode)\n
      \    real(rp),    intent(out)   :: elaqq(2,1,1)\n     real(rp),    intent(out)
      \  :: elrbq(2,1)\n     ! Local arrays\n     real(rp)                   :: gpsp1_p(2,pgaus)\n
      \    real(rp)                   :: gpsp1_v(2,pgaus)\n     real(rp)                   ::
      gpsp2_v(2,pgaus)\n     real(rp)                   :: c1(2)\n     real(rp)                   ::
      c2(2)\n     real(rp)                   :: c3(2)\n     real(rp)                   ::
      c4(2)\n     real(rp)                   :: alpha(2)\n     real(rp)                   ::
      beta(2)\n     real(rp)                   :: fact0(2)\n     real(rp)                   ::
      fact1(2)\n     real(rp)                   :: fact2(2)\n     real(rp)                   ::
      fact3(2)\n     real(rp)                   :: fact4(2)\n     real(rp)                   ::
      fact5(2)\n     real(rp)                   :: fact6(2)\n     real(rp)                   ::
      fact7(2)\n     real(rp)                   :: fact8(2)\n     real(rp)                   ::
      gpveo(2,3)\n     real(rp)                   :: fact1_p(2)\n     real(rp)                   ::
      dtinv_mod(2)\n     integer(ip)                :: inode,jnode,jdime\n     integer(ip)
      \               :: idofv,jdof2,jdof3,ivect\n     integer(ip)                ::
      idof1,idof3,idof2,igaus\n     integer(ip)                :: idime,jdof1,jdofv,itime\n
      \  dtinv_mod = dtinv_loc\n\n   gpsp1_p = gpsp1\n   gpsp1_v = gpsp1\n   gpsp2_v
      = gpsp2\n\n   if( kfl_nota1_nsi == 1 ) gpsp1_v = 0.0_rp \n\n   elrbp = 0.0_rp\n
      \  elrbu = 0.0_rp\n   elapp = 0.0_rp\n   elauu = 0.0_rp\n   elaup = 0.0_rp\n
      \  elapu = 0.0_rp\n if( kfl_stabi_nsi /= -1 ) then\n    do igaus = 1,pgaus\n
      \      do inode = 1,pnode\n          do jnode = inode+1,pnode\n             fact1(1:2)
      \            = gpsp1_p(1:2,igaus) * wgrgr(1:2,jnode,inode,igaus) * gpvol(1:&\n&2,igaus)\n
      \            elapp(1:2,jnode,inode) = elapp(1:2,jnode,inode) + fact1(1:2)\n
      \            elapp(1:2,inode,jnode) = elapp(1:2,inode,jnode) + fact1(1:2)\n
      \         end do\n          fact1(1:2)             = gpsp1_p(1:2,igaus) * wgrgr(1:2,inode,inode,igaus)
      * gpvol(1:2,i&\n&gaus)\n          elapp(1:2,inode,inode) = elapp(1:2,inode,inode)
      + fact1(1:2)\n       end do\n    end do\n  end if\nend subroutine nsi_element_assembly_split_oss\n"
    ? :kernel: :boast
      :nest: 6
    : ! "double pabdf_nsi(const int32_t x){\n  double y;\n  y = 1.0;\n  return y;\n}\nvoid
      nsi_element_assembly_split_oss(const int32_t pnode, const int32_t pgaus, const
      __m128d * gpden, const __m128d * gpvis, const __m128d * gppor, const __m128d
      * gpsp1, const __m128d * gpsp2, const __m128d * gpvol, const __m128d * gpsha,
      const __m128d * gpcar, const __m128d * gpadv, __m128d * gpvep, __m128d * gpgrp,
      __m128d * gprhs, __m128d * gprhc, const __m128d * gpvel, const __m128d * gpsgs,
      const __m128d * elvel, const __m128d * elpre, const __m128d * elbub, __m128d
      * elauu, __m128d * elaup, __m128d * elapp, __m128d * elapu, __m128d * elrbu,
      __m128d * elrbp, const __m128d * dtinv_loc, const __m128d * dtsgs, const __m64
      * pbubl, const __m128d * gpsha_bub, const __m128d * gpcar_bub, __m128d * elauq,
      __m128d * elapq, __m128d * elaqu, __m128d * elaqp, __m128d * elaqq, __m128d
      * elrbq, const int32_t kfl_lumped, const int32_t mnode, const int32_t ntens,
      const int32_t kfl_duatss, const int32_t fact_duatss, const int32_t kfl_stabi_nsi,
      const double fvins_nsi, const double fcons_nsi, const double bemol_nsi, const
      int32_t kfl_regim_nsi, const double * fvela_nsi, const int32_t kfl_rmom2_nsi,
      const int32_t kfl_press_nsi, const int32_t kfl_p1ve2_nsi, const int32_t kfl_linea_nsi,
      const int32_t kfl_confi_nsi, const int32_t nbdfp_nsi, const int32_t kfl_sgsti_nsi,
      const int32_t kfl_nota1_nsi, const int32_t kfl_limit_nsi, const int32_t kfl_penal_nsi,
      const double penal_nsi, const int32_t kfl_bubbl_nsi, const int32_t ndime, __m128d
      * agrau, __m128d * wgrgr){\n  __m128d gpsp1_p[(pgaus)];\n  __m128d gpsp1_v[(pgaus)];\n
      \ __m128d gpsp2_v[(pgaus)];\n  __m128d c1[(1)];\n  __m128d c2[(1)];\n  __m128d
      c3[(1)];\n  __m128d c4[(1)];\n  __m128d alpha[(1)];\n  __m128d beta[(1)];\n
      \ __m128d gpveo[(3)];\n  __m128d fact1_p[(1)];\n  __m128d dtinv_mod[(1)];\n
      \ int32_t inode;\n  int32_t jnode;\n  int32_t jdime;\n  int32_t idofv;\n  int32_t
      ivect;\n  int32_t igaus;\n  int32_t idime;\n  int32_t jdofv;\n  int32_t itime;\n
      \ __m128d fact[(8)];\n  int32_t idof[(3)];\n  int32_t jdof[(3)];\n  memcpy(dtinv_mod,
      dtinv_loc, sizeof(dtinv_mod));\n  memcpy(gpsp1_p, gpsp1, sizeof(gpsp1_p));\n
      \ memcpy(gpsp1_v, gpsp1, sizeof(gpsp1_v));\n  memcpy(gpsp2_v, gpsp2, sizeof(gpsp2_v));\n\n
      \ if (kfl_nota1_nsi == 1) memset(gpsp1_v, 0, sizeof(gpsp1_v));\n\n  memset(elrbp,
      0, sizeof(__m128d) * pnode);\n  memset(elrbu, 0, sizeof(__m128d) * ndime * pnode);\n
      \ memset(elapp, 0, sizeof(__m128d) * pnode * pnode);\n  memset(elauu, 0, sizeof(__m128d)
      * pnode * ndime * pnode * ndime);\n  memset(elaup, 0, sizeof(__m128d) * pnode
      * ndime * pnode);\n  memset(elapu, 0, sizeof(__m128d) * pnode * pnode * ndime);\n
      \ if (kfl_stabi_nsi != -1) {\n    for (igaus = 1; igaus <= pgaus; igaus += 1)
      {\n      for (inode = 1; inode <= pnode; inode += 1) {\n        for (jnode =
      inode + 1; jnode <= pnode; jnode += 1) {\n          fact[1 - (1)] = _mm_mul_pd(
      _mm_mul_pd( gpsp1_p[igaus - (1)], wgrgr[jnode - (1) + (pnode) * (inode - (1)
      + (pnode) * (igaus - (1)))] ), gpvol[igaus - (1)] );\n          elapp[jnode
      - (1) + (pnode) * (inode - (1))] = _mm_add_pd( elapp[jnode - (1) + (pnode) *
      (inode - (1))], fact[1 - (1)] );\n          elapp[inode - (1) + (pnode) * (jnode
      - (1))] = _mm_add_pd( elapp[inode - (1) + (pnode) * (jnode - (1))], fact[1 -
      (1)] );\n        }\n        fact[1 - (1)] = _mm_mul_pd( _mm_mul_pd( gpsp1_p[igaus
      - (1)], wgrgr[inode - (1) + (pnode) * (inode - (1) + (pnode) * (igaus - (1)))]
      ), gpvol[igaus - (1)] );\n        elapp[inode - (1) + (pnode) * (inode - (1))]
      = _mm_add_pd( elapp[inode - (1) + (pnode) * (inode - (1))], fact[1 - (1)] );\n
      \     }\n    }\n  }\n}\n"
    ? :kernel: :ref
      :nest: 7
    : ! "function pabdf_nsi(x) result(y)\n  integer,intent(in) :: x \n  real :: y\n
      \ y = 1.0\nend function pabdf_nsi\n     subroutine nsi_element_assembly_split_oss(&\n
      \    pnode,pgaus,gpden,gpvis,gppor,gpsp1,gpsp2,gpvol,   &\n     gpsha,gpcar,gpadv,gpvep,gpgrp,gprhs,gprhc,gpvel,
      \  &\n     gpsgs,elvel,elpre,elbub,elauu,elaup,elapp,elapu,   &\n     elrbu,elrbp,dtinv_loc,dtsgs,pbubl,gpsha_bub,
      \      &\n     gpcar_bub,elauq,elapq,elaqu,elaqp,elaqq,elrbq,&\n     ! Original
      global variables\n     kfl_lumped,&\n     mnode,ntens,&\n     kfl_duatss,&\n
      \    fact_duatss,&\n     kfl_stabi_nsi,&\n     fvins_nsi,fcons_nsi,bemol_nsi,kfl_regim_nsi,&\n
      \    fvela_nsi,kfl_rmom2_nsi,kfl_press_nsi,&\n     kfl_p1ve2_nsi,kfl_linea_nsi,&\n
      \    kfl_confi_nsi,nbdfp_nsi,kfl_sgsti_nsi,&\n     kfl_nota1_nsi,kfl_limit_nsi,kfl_penal_nsi,&\n
      \    penal_nsi,&\n     kfl_bubbl_nsi,&\n     ndime,agrau,wgrgr)\n\n       integer,
      \    parameter  :: ip    = 4               ! 4-byte integer\n  integer,     parameter
      \ :: rp    = 8               ! Double precision \n\n  real(rp),    parameter
      \ :: zeror = epsilon(1.0_rp) ! Almost zero\n  integer(ip), parameter  :: TET04
      = 30              ! 3D \n  integer(ip), parameter  :: TET10 = 31              !
      3D \n  integer(ip), parameter  :: PYR05 = 32              ! 3D \n  integer(ip),
      parameter  :: PYR14 = 33              ! 3D \n  integer(ip), parameter  :: PEN06
      = 34              ! 3D  \n  integer(ip), parameter  :: PEN15 = 35              !
      3D \n  integer(ip), parameter  :: PEN18 = 36              ! 3D \n  integer(ip),
      parameter  :: HEX08 = 37              ! 3D \n  integer(ip), parameter  :: HEX20
      = 38              ! 3D \n  integer(ip), parameter  :: HEX27 = 39              !
      3D \n  integer(ip), parameter  :: HEX64 = 40              ! 3D \n  integer(ip),
      parameter  :: SHELL = 51              ! 3D shell element\n  integer(ip), parameter
      \ :: BAR3D = 52              ! 3D bar element\n\n\n     integer(ip), intent(in)
      \   :: ndime \n     integer(ip), intent(in)    :: kfl_lumped\n     integer(ip),
      intent(in)    :: mnode\n     integer(ip), intent(in)    :: ntens\n     integer(ip),
      intent(in)    :: kfl_duatss\n     integer(ip), intent(in)    :: fact_duatss\n
      \    integer(ip), intent(in)    :: kfl_stabi_nsi\n     real(rp),    intent(in)
      \   :: fvins_nsi\n     real(rp),    intent(in)    :: fcons_nsi\n     real(rp),
      \   intent(in)    :: bemol_nsi\n     integer(ip), intent(in)    :: kfl_regim_nsi\n
      \    real(rp),    intent(in)    :: fvela_nsi(3)\n     integer(ip), intent(in)
      \   :: kfl_rmom2_nsi\n     integer(ip), intent(in)    :: kfl_press_nsi\n     integer(ip),
      intent(in)    :: kfl_p1ve2_nsi\n     integer(ip), intent(in)    :: kfl_linea_nsi\n
      \    integer(ip), intent(in)    :: kfl_confi_nsi\n     integer(ip), intent(in)
      \   :: nbdfp_nsi\n     integer(ip), intent(in)    :: kfl_sgsti_nsi\n     integer(ip),
      intent(in)    :: kfl_nota1_nsi\n     integer(ip), intent(in)    :: kfl_limit_nsi\n
      \    integer(ip), intent(in)    :: kfl_penal_nsi\n     real(rp),    intent(in)
      \   :: penal_nsi\n     integer(ip), intent(in)    :: kfl_bubbl_nsi\n\n     integer(ip),
      intent(in)    :: pnode,pgaus\n     real(rp),    intent(in)    :: gpden(2,pgaus)\n
      \    real(rp),    intent(in)    :: gpvis(2,pgaus)\n     real(rp),    intent(in)
      \   :: gppor(2,pgaus)\n     real(rp),    intent(in)    :: gpsp1(2,pgaus)\n     real(rp),
      \   intent(in)    :: gpsp2(2,pgaus)\n     real(rp),    intent(in)    :: gpvol(2,pgaus)\n
      \    real(rp),    intent(in)    :: gpsha(2,pnode,pgaus)\n     real(rp),    intent(in)
      \   :: gpcar(2,ndime,mnode,pgaus)\n     real(rp),    intent(in)    :: gpadv(2,ndime,pgaus)\n
      \    real(rp),    intent(inout) :: gpvep(2,ndime,pgaus)\n     real(rp),    intent(inout)
      :: gpgrp(2,ndime,pgaus)\n     real(rp),    intent(inout) :: gprhs(2,ndime,pgaus)\n
      \    real(rp),    intent(inout) :: gprhc(2,pgaus)\n     real(rp),    intent(in)
      \   :: gpvel(2,ndime,pgaus,*)\n     real(rp),    intent(in)    :: gpsgs(2,ndime,pgaus,*)\n
      \    real(rp),    intent(in)    :: elvel(2,ndime,pnode,*)\n     real(rp),    intent(in)
      \   :: elpre(2,pnode,*)\n     real(rp),    intent(in)    :: elbub(2)\n\n     real(rp),
      \   intent(out)   :: wgrgr(2,pnode,pnode,pgaus)\n     real(rp),    intent(out)
      \  :: agrau(2,pnode,pgaus)\n\n     ! Matrices\n     real(rp),    intent(out)
      \  :: elauu(2,pnode*ndime,pnode*ndime)\n     real(rp),    intent(out)   :: elaup(2,pnode*ndime,pnode)\n
      \    real(rp),    intent(out)   :: elapp(2,pnode,pnode)\n     real(rp),    intent(out)
      \  :: elapu(2,pnode,pnode*ndime)\n     real(rp),    intent(out)   :: elrbu(2,ndime,pnode)\n
      \    real(rp),    intent(out)   :: elrbp(2,pnode)\n     ! Others\n     real(rp),
      \   intent(in)    :: dtinv_loc(2)\n     real(rp),    intent(in)    :: dtsgs(2)\n
      \    integer(ip), intent(in)    :: pbubl(2)\n     real(rp),    intent(in)    ::
      gpsha_bub(2,pgaus)\n     real(rp),    intent(in)    :: gpcar_bub(2,ndime,pgaus)\n
      \    ! Enrichement Element matrices\n     real(rp),    intent(out)   :: elauq(2,pnode*ndime,1)\n
      \    real(rp),    intent(out)   :: elapq(2,pnode,1)\n     real(rp),    intent(out)
      \  :: elaqu(2,1,pnode*ndime)\n     real(rp),    intent(out)   :: elaqp(2,1,pnode)\n
      \    real(rp),    intent(out)   :: elaqq(2,1,1)\n     real(rp),    intent(out)
      \  :: elrbq(2,1)\n     ! Local arrays\n     real(rp)                   :: gpsp1_p(2,pgaus)\n
      \    real(rp)                   :: gpsp1_v(2,pgaus)\n     real(rp)                   ::
      gpsp2_v(2,pgaus)\n     real(rp)                   :: c1(2)\n     real(rp)                   ::
      c2(2)\n     real(rp)                   :: c3(2)\n     real(rp)                   ::
      c4(2)\n     real(rp)                   :: alpha(2)\n     real(rp)                   ::
      beta(2)\n     real(rp)                   :: fact0(2)\n     real(rp)                   ::
      fact1(2)\n     real(rp)                   :: fact2(2)\n     real(rp)                   ::
      fact3(2)\n     real(rp)                   :: fact4(2)\n     real(rp)                   ::
      fact5(2)\n     real(rp)                   :: fact6(2)\n     real(rp)                   ::
      fact7(2)\n     real(rp)                   :: fact8(2)\n     real(rp)                   ::
      gpveo(2,3)\n     real(rp)                   :: fact1_p(2)\n     real(rp)                   ::
      dtinv_mod(2)\n     integer(ip)                :: inode,jnode,jdime\n     integer(ip)
      \               :: idofv,jdof2,jdof3,ivect\n     integer(ip)                ::
      idof1,idof3,idof2,igaus\n     integer(ip)                :: idime,jdof1,jdofv,itime\n
      \  dtinv_mod = dtinv_loc\n\n   gpsp1_p = gpsp1\n   gpsp1_v = gpsp1\n   gpsp2_v
      = gpsp2\n\n   if( kfl_nota1_nsi == 1 ) gpsp1_v = 0.0_rp \n\n   elrbp = 0.0_rp\n
      \  elrbu = 0.0_rp\n   elapp = 0.0_rp\n   elauu = 0.0_rp\n   elaup = 0.0_rp\n
      \  elapu = 0.0_rp\n do igaus = 1,pgaus\n   fact1(1:2) = penal_nsi * gpvol(1:2,igaus)\n
      \  do inode = 1,pnode\n     elapp(1:2,inode,inode) = elapp(1:2,inode,inode)
      + fact1(1:2) * gpsha(1:2,inode,igaus)\n     elrbp(1:2,inode)       = elrbp(1:2,inode)
      \      + fact1(1:2) * gpsha(1:2,inode,igaus) * elpre&\n&(1:2,inode,1) \n   end
      do\n end do\nend subroutine nsi_element_assembly_split_oss\n"
    ? :kernel: :boast
      :nest: 7
    : ! "double pabdf_nsi(const int32_t x){\n  double y;\n  y = 1.0;\n  return y;\n}\nvoid
      nsi_element_assembly_split_oss(const int32_t pnode, const int32_t pgaus, const
      __m128d * gpden, const __m128d * gpvis, const __m128d * gppor, const __m128d
      * gpsp1, const __m128d * gpsp2, const __m128d * gpvol, const __m128d * gpsha,
      const __m128d * gpcar, const __m128d * gpadv, __m128d * gpvep, __m128d * gpgrp,
      __m128d * gprhs, __m128d * gprhc, const __m128d * gpvel, const __m128d * gpsgs,
      const __m128d * elvel, const __m128d * elpre, const __m128d * elbub, __m128d
      * elauu, __m128d * elaup, __m128d * elapp, __m128d * elapu, __m128d * elrbu,
      __m128d * elrbp, const __m128d * dtinv_loc, const __m128d * dtsgs, const __m64
      * pbubl, const __m128d * gpsha_bub, const __m128d * gpcar_bub, __m128d * elauq,
      __m128d * elapq, __m128d * elaqu, __m128d * elaqp, __m128d * elaqq, __m128d
      * elrbq, const int32_t kfl_lumped, const int32_t mnode, const int32_t ntens,
      const int32_t kfl_duatss, const int32_t fact_duatss, const int32_t kfl_stabi_nsi,
      const double fvins_nsi, const double fcons_nsi, const double bemol_nsi, const
      int32_t kfl_regim_nsi, const double * fvela_nsi, const int32_t kfl_rmom2_nsi,
      const int32_t kfl_press_nsi, const int32_t kfl_p1ve2_nsi, const int32_t kfl_linea_nsi,
      const int32_t kfl_confi_nsi, const int32_t nbdfp_nsi, const int32_t kfl_sgsti_nsi,
      const int32_t kfl_nota1_nsi, const int32_t kfl_limit_nsi, const int32_t kfl_penal_nsi,
      const double penal_nsi, const int32_t kfl_bubbl_nsi, const int32_t ndime, __m128d
      * agrau, __m128d * wgrgr){\n  __m128d gpsp1_p[(pgaus)];\n  __m128d gpsp1_v[(pgaus)];\n
      \ __m128d gpsp2_v[(pgaus)];\n  __m128d c1[(1)];\n  __m128d c2[(1)];\n  __m128d
      c3[(1)];\n  __m128d c4[(1)];\n  __m128d alpha[(1)];\n  __m128d beta[(1)];\n
      \ __m128d gpveo[(3)];\n  __m128d fact1_p[(1)];\n  __m128d dtinv_mod[(1)];\n
      \ int32_t inode;\n  int32_t jnode;\n  int32_t jdime;\n  int32_t idofv;\n  int32_t
      ivect;\n  int32_t igaus;\n  int32_t idime;\n  int32_t jdofv;\n  int32_t itime;\n
      \ __m128d fact[(8)];\n  int32_t idof[(3)];\n  int32_t jdof[(3)];\n  memcpy(dtinv_mod,
      dtinv_loc, sizeof(dtinv_mod));\n  memcpy(gpsp1_p, gpsp1, sizeof(gpsp1_p));\n
      \ memcpy(gpsp1_v, gpsp1, sizeof(gpsp1_v));\n  memcpy(gpsp2_v, gpsp2, sizeof(gpsp2_v));\n\n
      \ if (kfl_nota1_nsi == 1) memset(gpsp1_v, 0, sizeof(gpsp1_v));\n\n  memset(elrbp,
      0, sizeof(__m128d) * pnode);\n  memset(elrbu, 0, sizeof(__m128d) * ndime * pnode);\n
      \ memset(elapp, 0, sizeof(__m128d) * pnode * pnode);\n  memset(elauu, 0, sizeof(__m128d)
      * pnode * ndime * pnode * ndime);\n  memset(elaup, 0, sizeof(__m128d) * pnode
      * ndime * pnode);\n  memset(elapu, 0, sizeof(__m128d) * pnode * pnode * ndime);\n
      \ for (igaus = 1; igaus <= pgaus; igaus += 1) {\n    fact[1 - (1)] = _mm_mul_pd(
      _mm_set1_pd( penal_nsi ), gpvol[igaus - (1)] );\n    for (inode = 1; inode <=
      pnode; inode += 1) {\n      elapp[inode - (1) + (pnode) * (inode - (1))] = _mm_add_pd(
      elapp[inode - (1) + (pnode) * (inode - (1))], _mm_mul_pd( fact[1 - (1)], gpsha[inode
      - (1) + (pnode) * (igaus - (1))] ) );\n      elrbp[inode - (1)] = _mm_add_pd(
      elrbp[inode - (1)], _mm_mul_pd( _mm_mul_pd( fact[1 - (1)], gpsha[inode - (1)
      + (pnode) * (igaus - (1))] ), elpre[inode - (1) + (pnode) * (1 - (1))] ) );\n
      \   }\n  }\n}\n"
    ? :kernel: :ref
      :nest: 9
    : ! "function pabdf_nsi(x) result(y)\n  integer,intent(in) :: x \n  real :: y\n
      \ y = 1.0\nend function pabdf_nsi\n     subroutine nsi_element_assembly_split_oss(&\n
      \    pnode,pgaus,gpden,gpvis,gppor,gpsp1,gpsp2,gpvol,   &\n     gpsha,gpcar,gpadv,gpvep,gpgrp,gprhs,gprhc,gpvel,
      \  &\n     gpsgs,elvel,elpre,elbub,elauu,elaup,elapp,elapu,   &\n     elrbu,elrbp,dtinv_loc,dtsgs,pbubl,gpsha_bub,
      \      &\n     gpcar_bub,elauq,elapq,elaqu,elaqp,elaqq,elrbq,&\n     ! Original
      global variables\n     kfl_lumped,&\n     mnode,ntens,&\n     kfl_duatss,&\n
      \    fact_duatss,&\n     kfl_stabi_nsi,&\n     fvins_nsi,fcons_nsi,bemol_nsi,kfl_regim_nsi,&\n
      \    fvela_nsi,kfl_rmom2_nsi,kfl_press_nsi,&\n     kfl_p1ve2_nsi,kfl_linea_nsi,&\n
      \    kfl_confi_nsi,nbdfp_nsi,kfl_sgsti_nsi,&\n     kfl_nota1_nsi,kfl_limit_nsi,kfl_penal_nsi,&\n
      \    penal_nsi,&\n     kfl_bubbl_nsi,&\n     ndime,agrau,wgrgr)\n\n       integer,
      \    parameter  :: ip    = 4               ! 4-byte integer\n  integer,     parameter
      \ :: rp    = 8               ! Double precision \n\n  real(rp),    parameter
      \ :: zeror = epsilon(1.0_rp) ! Almost zero\n  integer(ip), parameter  :: TET04
      = 30              ! 3D \n  integer(ip), parameter  :: TET10 = 31              !
      3D \n  integer(ip), parameter  :: PYR05 = 32              ! 3D \n  integer(ip),
      parameter  :: PYR14 = 33              ! 3D \n  integer(ip), parameter  :: PEN06
      = 34              ! 3D  \n  integer(ip), parameter  :: PEN15 = 35              !
      3D \n  integer(ip), parameter  :: PEN18 = 36              ! 3D \n  integer(ip),
      parameter  :: HEX08 = 37              ! 3D \n  integer(ip), parameter  :: HEX20
      = 38              ! 3D \n  integer(ip), parameter  :: HEX27 = 39              !
      3D \n  integer(ip), parameter  :: HEX64 = 40              ! 3D \n  integer(ip),
      parameter  :: SHELL = 51              ! 3D shell element\n  integer(ip), parameter
      \ :: BAR3D = 52              ! 3D bar element\n\n\n     integer(ip), intent(in)
      \   :: ndime \n     integer(ip), intent(in)    :: kfl_lumped\n     integer(ip),
      intent(in)    :: mnode\n     integer(ip), intent(in)    :: ntens\n     integer(ip),
      intent(in)    :: kfl_duatss\n     integer(ip), intent(in)    :: fact_duatss\n
      \    integer(ip), intent(in)    :: kfl_stabi_nsi\n     real(rp),    intent(in)
      \   :: fvins_nsi\n     real(rp),    intent(in)    :: fcons_nsi\n     real(rp),
      \   intent(in)    :: bemol_nsi\n     integer(ip), intent(in)    :: kfl_regim_nsi\n
      \    real(rp),    intent(in)    :: fvela_nsi(3)\n     integer(ip), intent(in)
      \   :: kfl_rmom2_nsi\n     integer(ip), intent(in)    :: kfl_press_nsi\n     integer(ip),
      intent(in)    :: kfl_p1ve2_nsi\n     integer(ip), intent(in)    :: kfl_linea_nsi\n
      \    integer(ip), intent(in)    :: kfl_confi_nsi\n     integer(ip), intent(in)
      \   :: nbdfp_nsi\n     integer(ip), intent(in)    :: kfl_sgsti_nsi\n     integer(ip),
      intent(in)    :: kfl_nota1_nsi\n     integer(ip), intent(in)    :: kfl_limit_nsi\n
      \    integer(ip), intent(in)    :: kfl_penal_nsi\n     real(rp),    intent(in)
      \   :: penal_nsi\n     integer(ip), intent(in)    :: kfl_bubbl_nsi\n\n     integer(ip),
      intent(in)    :: pnode,pgaus\n     real(rp),    intent(in)    :: gpden(2,pgaus)\n
      \    real(rp),    intent(in)    :: gpvis(2,pgaus)\n     real(rp),    intent(in)
      \   :: gppor(2,pgaus)\n     real(rp),    intent(in)    :: gpsp1(2,pgaus)\n     real(rp),
      \   intent(in)    :: gpsp2(2,pgaus)\n     real(rp),    intent(in)    :: gpvol(2,pgaus)\n
      \    real(rp),    intent(in)    :: gpsha(2,pnode,pgaus)\n     real(rp),    intent(in)
      \   :: gpcar(2,ndime,mnode,pgaus)\n     real(rp),    intent(in)    :: gpadv(2,ndime,pgaus)\n
      \    real(rp),    intent(inout) :: gpvep(2,ndime,pgaus)\n     real(rp),    intent(inout)
      :: gpgrp(2,ndime,pgaus)\n     real(rp),    intent(inout) :: gprhs(2,ndime,pgaus)\n
      \    real(rp),    intent(inout) :: gprhc(2,pgaus)\n     real(rp),    intent(in)
      \   :: gpvel(2,ndime,pgaus,*)\n     real(rp),    intent(in)    :: gpsgs(2,ndime,pgaus,*)\n
      \    real(rp),    intent(in)    :: elvel(2,ndime,pnode,*)\n     real(rp),    intent(in)
      \   :: elpre(2,pnode,*)\n     real(rp),    intent(in)    :: elbub(2)\n\n     real(rp),
      \   intent(out)   :: wgrgr(2,pnode,pnode,pgaus)\n     real(rp),    intent(out)
      \  :: agrau(2,pnode,pgaus)\n\n     ! Matrices\n     real(rp),    intent(out)
      \  :: elauu(2,pnode*ndime,pnode*ndime)\n     real(rp),    intent(out)   :: elaup(2,pnode*ndime,pnode)\n
      \    real(rp),    intent(out)   :: elapp(2,pnode,pnode)\n     real(rp),    intent(out)
      \  :: elapu(2,pnode,pnode*ndime)\n     real(rp),    intent(out)   :: elrbu(2,ndime,pnode)\n
      \    real(rp),    intent(out)   :: elrbp(2,pnode)\n     ! Others\n     real(rp),
      \   intent(in)    :: dtinv_loc(2)\n     real(rp),    intent(in)    :: dtsgs(2)\n
      \    integer(ip), intent(in)    :: pbubl(2)\n     real(rp),    intent(in)    ::
      gpsha_bub(2,pgaus)\n     real(rp),    intent(in)    :: gpcar_bub(2,ndime,pgaus)\n
      \    ! Enrichement Element matrices\n     real(rp),    intent(out)   :: elauq(2,pnode*ndime,1)\n
      \    real(rp),    intent(out)   :: elapq(2,pnode,1)\n     real(rp),    intent(out)
      \  :: elaqu(2,1,pnode*ndime)\n     real(rp),    intent(out)   :: elaqp(2,1,pnode)\n
      \    real(rp),    intent(out)   :: elaqq(2,1,1)\n     real(rp),    intent(out)
      \  :: elrbq(2,1)\n     ! Local arrays\n     real(rp)                   :: gpsp1_p(2,pgaus)\n
      \    real(rp)                   :: gpsp1_v(2,pgaus)\n     real(rp)                   ::
      gpsp2_v(2,pgaus)\n     real(rp)                   :: c1(2)\n     real(rp)                   ::
      c2(2)\n     real(rp)                   :: c3(2)\n     real(rp)                   ::
      c4(2)\n     real(rp)                   :: alpha(2)\n     real(rp)                   ::
      beta(2)\n     real(rp)                   :: fact0(2)\n     real(rp)                   ::
      fact1(2)\n     real(rp)                   :: fact2(2)\n     real(rp)                   ::
      fact3(2)\n     real(rp)                   :: fact4(2)\n     real(rp)                   ::
      fact5(2)\n     real(rp)                   :: fact6(2)\n     real(rp)                   ::
      fact7(2)\n     real(rp)                   :: fact8(2)\n     real(rp)                   ::
      gpveo(2,3)\n     real(rp)                   :: fact1_p(2)\n     real(rp)                   ::
      dtinv_mod(2)\n     integer(ip)                :: inode,jnode,jdime\n     integer(ip)
      \               :: idofv,jdof2,jdof3,ivect\n     integer(ip)                ::
      idof1,idof3,idof2,igaus\n     integer(ip)                :: idime,jdof1,jdofv,itime\n
      \  dtinv_mod = dtinv_loc\n\n   gpsp1_p = gpsp1\n   gpsp1_v = gpsp1\n   gpsp2_v
      = gpsp2\n\n   if( kfl_nota1_nsi == 1 ) gpsp1_v = 0.0_rp \n\n   elrbp = 0.0_rp\n
      \  elrbu = 0.0_rp\n   elapp = 0.0_rp\n   elauu = 0.0_rp\n   elaup = 0.0_rp\n
      \  elapu = 0.0_rp\nif( kfl_stabi_nsi == -1 ) then\n   gpgrp(1:2,:,:) = 0.0_rp\nelse\n
      \  do igaus = 1,pgaus\n      do idime = 1,ndime\n         gpgrp(1:2,idime,igaus)
      = gpgrp(1:2,idime,igaus) + gpsp1_p(1:2,igaus) * gprhs(1:2,idime,ig&\n&aus)\n
      \     end do\n   end do\n   if( kfl_sgsti_nsi == 1 ) then\n      do igaus =
      1,pgaus \n         fact1(1:2)    = gpden(1:2,igaus) * dtsgs(1:2) * gpsp1_v(1:2,igaus)\n
      \        fact1_p (1:2) = gpden(1:2,igaus) * dtsgs(1:2) * gpsp1_p(1:2,igaus)\n
      \        do idime = 1,ndime\n            gpvep(1:2,idime,igaus) = gpvep(1:2,idime,igaus)
      + fact1(1:2)   * gpsgs(1:2,idime,igaus&\n&,2)\n            gpgrp(1:2,idime,igaus)
      = gpgrp(1:2,idime,igaus) + fact1_p(1:2) * gpsgs(1:2,idime,igaus&\n&,2)\n         end
      do\n      end do\n   end if\nend if\nend subroutine nsi_element_assembly_split_oss\n"
    ? :kernel: :boast
      :nest: 9
    : ! "double pabdf_nsi(const int32_t x){\n  double y;\n  y = 1.0;\n  return y;\n}\nvoid
      nsi_element_assembly_split_oss(const int32_t pnode, const int32_t pgaus, const
      __m128d * gpden, const __m128d * gpvis, const __m128d * gppor, const __m128d
      * gpsp1, const __m128d * gpsp2, const __m128d * gpvol, const __m128d * gpsha,
      const __m128d * gpcar, const __m128d * gpadv, __m128d * gpvep, __m128d * gpgrp,
      __m128d * gprhs, __m128d * gprhc, const __m128d * gpvel, const __m128d * gpsgs,
      const __m128d * elvel, const __m128d * elpre, const __m128d * elbub, __m128d
      * elauu, __m128d * elaup, __m128d * elapp, __m128d * elapu, __m128d * elrbu,
      __m128d * elrbp, const __m128d * dtinv_loc, const __m128d * dtsgs, const __m64
      * pbubl, const __m128d * gpsha_bub, const __m128d * gpcar_bub, __m128d * elauq,
      __m128d * elapq, __m128d * elaqu, __m128d * elaqp, __m128d * elaqq, __m128d
      * elrbq, const int32_t kfl_lumped, const int32_t mnode, const int32_t ntens,
      const int32_t kfl_duatss, const int32_t fact_duatss, const int32_t kfl_stabi_nsi,
      const double fvins_nsi, const double fcons_nsi, const double bemol_nsi, const
      int32_t kfl_regim_nsi, const double * fvela_nsi, const int32_t kfl_rmom2_nsi,
      const int32_t kfl_press_nsi, const int32_t kfl_p1ve2_nsi, const int32_t kfl_linea_nsi,
      const int32_t kfl_confi_nsi, const int32_t nbdfp_nsi, const int32_t kfl_sgsti_nsi,
      const int32_t kfl_nota1_nsi, const int32_t kfl_limit_nsi, const int32_t kfl_penal_nsi,
      const double penal_nsi, const int32_t kfl_bubbl_nsi, const int32_t ndime, __m128d
      * agrau, __m128d * wgrgr){\n  __m128d gpsp1_p[(pgaus)];\n  __m128d gpsp1_v[(pgaus)];\n
      \ __m128d gpsp2_v[(pgaus)];\n  __m128d c1[(1)];\n  __m128d c2[(1)];\n  __m128d
      c3[(1)];\n  __m128d c4[(1)];\n  __m128d alpha[(1)];\n  __m128d beta[(1)];\n
      \ __m128d gpveo[(3)];\n  __m128d fact1_p[(1)];\n  __m128d dtinv_mod[(1)];\n
      \ int32_t inode;\n  int32_t jnode;\n  int32_t jdime;\n  int32_t idofv;\n  int32_t
      ivect;\n  int32_t igaus;\n  int32_t idime;\n  int32_t jdofv;\n  int32_t itime;\n
      \ __m128d fact[(8)];\n  int32_t idof[(3)];\n  int32_t jdof[(3)];\n  memcpy(dtinv_mod,
      dtinv_loc, sizeof(dtinv_mod));\n  memcpy(gpsp1_p, gpsp1, sizeof(gpsp1_p));\n
      \ memcpy(gpsp1_v, gpsp1, sizeof(gpsp1_v));\n  memcpy(gpsp2_v, gpsp2, sizeof(gpsp2_v));\n\n
      \ if (kfl_nota1_nsi == 1) memset(gpsp1_v, 0, sizeof(gpsp1_v));\n\n  memset(elrbp,
      0, sizeof(__m128d) * pnode);\n  memset(elrbu, 0, sizeof(__m128d) * ndime * pnode);\n
      \ memset(elapp, 0, sizeof(__m128d) * pnode * pnode);\n  memset(elauu, 0, sizeof(__m128d)
      * pnode * ndime * pnode * ndime);\n  memset(elaup, 0, sizeof(__m128d) * pnode
      * ndime * pnode);\n  memset(elapu, 0, sizeof(__m128d) * pnode * pnode * ndime);\n
      \ if (kfl_stabi_nsi == -1) {\n                      memset(gpgrp,0,sizeof(__m128d)
      * ndime * pgaus);\n  } else {\n    if (ndime == 2) {\n      for (igaus = 1;
      igaus <= pgaus; igaus += 1) {\n        gpgrp[1 - (1) + (ndime) * (igaus - (1))]
      = _mm_add_pd( gpgrp[1 - (1) + (ndime) * (igaus - (1))], _mm_mul_pd( gpsp1_p[igaus
      - (1)], gprhs[1 - (1) + (ndime) * (igaus - (1))] ) );\n        gpgrp[2 - (1)
      + (ndime) * (igaus - (1))] = _mm_add_pd( gpgrp[2 - (1) + (ndime) * (igaus -
      (1))], _mm_mul_pd( gpsp1_p[igaus - (1)], gprhs[2 - (1) + (ndime) * (igaus -
      (1))] ) );\n      }\n    } else {\n      for (igaus = 1; igaus <= pgaus; igaus
      += 1) {\n        gpgrp[1 - (1) + (ndime) * (igaus - (1))] = _mm_add_pd( gpgrp[1
      - (1) + (ndime) * (igaus - (1))], _mm_mul_pd( gpsp1_p[igaus - (1)], gprhs[1
      - (1) + (ndime) * (igaus - (1))] ) );\n        gpgrp[2 - (1) + (ndime) * (igaus
      - (1))] = _mm_add_pd( gpgrp[2 - (1) + (ndime) * (igaus - (1))], _mm_mul_pd(
      gpsp1_p[igaus - (1)], gprhs[2 - (1) + (ndime) * (igaus - (1))] ) );\n        gpgrp[3
      - (1) + (ndime) * (igaus - (1))] = _mm_add_pd( gpgrp[3 - (1) + (ndime) * (igaus
      - (1))], _mm_mul_pd( gpsp1_p[igaus - (1)], gprhs[3 - (1) + (ndime) * (igaus
      - (1))] ) );\n      }\n    }\n    if (kfl_sgsti_nsi == 1) {\n      if (ndime
      == 2) {\n        for (igaus = 1; igaus <= pgaus; igaus += 1) {\n          fact[1
      - (1)] = _mm_mul_pd( _mm_mul_pd( gpden[igaus - (1)], dtsgs[1 - (1)] ), gpsp1_v[igaus
      - (1)] );\n          fact1_p[1 - (1)] = _mm_mul_pd( _mm_mul_pd( gpden[igaus
      - (1)], dtsgs[1 - (1)] ), gpsp1_p[igaus - (1)] );\n          gpvep[1 - (1) +
      (ndime) * (igaus - (1))] = _mm_add_pd( gpvep[1 - (1) + (ndime) * (igaus - (1))],
      _mm_mul_pd( fact[1 - (1)], gpsgs[1 - (1) + (ndime) * (igaus - (1) + (pgaus)
      * (2 - (1)))] ) );\n          gpgrp[1 - (1) + (ndime) * (igaus - (1))] = _mm_add_pd(
      gpgrp[1 - (1) + (ndime) * (igaus - (1))], _mm_mul_pd( fact1_p[1 - (1)], gpsgs[1
      - (1) + (ndime) * (igaus - (1) + (pgaus) * (2 - (1)))] ) );\n          gpvep[2
      - (1) + (ndime) * (igaus - (1))] = _mm_add_pd( gpvep[2 - (1) + (ndime) * (igaus
      - (1))], _mm_mul_pd( fact[1 - (1)], gpsgs[2 - (1) + (ndime) * (igaus - (1) +
      (pgaus) * (2 - (1)))] ) );\n          gpgrp[2 - (1) + (ndime) * (igaus - (1))]
      = _mm_add_pd( gpgrp[2 - (1) + (ndime) * (igaus - (1))], _mm_mul_pd( fact1_p[1
      - (1)], gpsgs[2 - (1) + (ndime) * (igaus - (1) + (pgaus) * (2 - (1)))] ) );\n
      \       }\n      } else {\n        for (igaus = 1; igaus <= pgaus; igaus +=
      1) {\n          fact[1 - (1)] = _mm_mul_pd( _mm_mul_pd( gpden[igaus - (1)],
      dtsgs[1 - (1)] ), gpsp1_v[igaus - (1)] );\n          fact1_p[1 - (1)] = _mm_mul_pd(
      _mm_mul_pd( gpden[igaus - (1)], dtsgs[1 - (1)] ), gpsp1_p[igaus - (1)] );\n
      \         gpvep[1 - (1) + (ndime) * (igaus - (1))] = _mm_add_pd( gpvep[1 - (1)
      + (ndime) * (igaus - (1))], _mm_mul_pd( fact[1 - (1)], gpsgs[1 - (1) + (ndime)
      * (igaus - (1) + (pgaus) * (2 - (1)))] ) );\n          gpgrp[1 - (1) + (ndime)
      * (igaus - (1))] = _mm_add_pd( gpgrp[1 - (1) + (ndime) * (igaus - (1))], _mm_mul_pd(
      fact1_p[1 - (1)], gpsgs[1 - (1) + (ndime) * (igaus - (1) + (pgaus) * (2 - (1)))]
      ) );\n          gpvep[2 - (1) + (ndime) * (igaus - (1))] = _mm_add_pd( gpvep[2
      - (1) + (ndime) * (igaus - (1))], _mm_mul_pd( fact[1 - (1)], gpsgs[2 - (1) +
      (ndime) * (igaus - (1) + (pgaus) * (2 - (1)))] ) );\n          gpgrp[2 - (1)
      + (ndime) * (igaus - (1))] = _mm_add_pd( gpgrp[2 - (1) + (ndime) * (igaus -
      (1))], _mm_mul_pd( fact1_p[1 - (1)], gpsgs[2 - (1) + (ndime) * (igaus - (1)
      + (pgaus) * (2 - (1)))] ) );\n          gpvep[3 - (1) + (ndime) * (igaus - (1))]
      = _mm_add_pd( gpvep[3 - (1) + (ndime) * (igaus - (1))], _mm_mul_pd( fact[1 -
      (1)], gpsgs[3 - (1) + (ndime) * (igaus - (1) + (pgaus) * (2 - (1)))] ) );\n
      \         gpgrp[3 - (1) + (ndime) * (igaus - (1))] = _mm_add_pd( gpgrp[3 - (1)
      + (ndime) * (igaus - (1))], _mm_mul_pd( fact1_p[1 - (1)], gpsgs[3 - (1) + (ndime)
      * (igaus - (1) + (pgaus) * (2 - (1)))] ) );\n        }\n      }\n    }\n  }\n}\n"
